[Templates]
$SettingsWorkArea    = a(lt) sz(p,p) mg(12,12) 
$SettingsNavBtn_W    = 51
$SettingsNavBtn_H    = 47
$EditBoxesOffset     = 220

;------------- Scheduler -----------

[SchedulerView]
$SchedulePage   = a(lt) sz(p,a) mg(,0) xy(,36) at(hide)
$LabelSize = 120
@               = sz(p,a) ext(1)
Period          = a(la) sz($LabelSize,a)
Type            = [SchedulerView_Type] a(ls) xy($LabelSize,-4) extprm(1)
Spacer          = a(lt) sz(0,154)
Once            = [SchedulerView_Once]
AtStartup       = [SchedulerView_AtStartup]
AfterUpdate     = [SchedulerView_AfterUpdate]
Minutely        = [SchedulerView_Minutely]
Hourly          = [SchedulerView_Hourly]
Daily           = [SchedulerView_Daily]
Weekly          = [SchedulerView_Weekly]
Monthly         = [SchedulerView_Monthly]
Time            = a(lt) xy(,65) sz($LabelSize,a) visible(switch(Type, "Scheduler_Time_Show"))
TimeEdit        = t(timeedit) at(notz) a(ls) xy($LabelSize,-4) sz($TimeEditCX) v(Time) visible(switch(Type, "Scheduler_Time_Show"))
PostponeStart   = [SchedulerView_PostponeStart]
RunIfSkipped    = $Check a(lt) xy(,137) v(RaiseIfSkipped) visible(switch(Type, "Scheduler_RunIfSkipped_Show")) extprm(1)
RunLock         = $Check a(lt) xy(,157) v(bmask(ExtScheduleFlags,0x01)) use(type != "Protection") extprm(1)

[SchedulerView_Type]
@                   = t(combo) sz(p,a) v(Type) onshow(ctl.value = Type)
Minutely            = v(#schtMinutely)
Hours               = v(#schtHourly)
Days                = v(#schtDaily)
Weeks               = v(#schtWeekly)
AtSpecTime          = v(#schtExactTime)
Monthly             = v(#schtMonthly)
AtAppStartup        = v(#schtOnStartup) use(type != "Protection")
AfterEveryUpdate    = v(#schtAfterUpdate) use(type == "ods")

[SchedulerView_Once]
@           = $SchedulePage visible(Type == #schtExactTime)
DateText    = sz($LabelSize,a)
Date        = t(timeedit) at(date,notz) a(ls) xy($LabelSize,-4) sz(150,22) v(Time)

[SchedulerView_AtStartup]
@               = $SchedulePage visible(Type == #schtOnStartup)
AtStartup       = sz($LabelSize,a)
AtStartupEdit   = t(edit) at(number) a(ls) sz($TimeEditCX) nl(0,60) xy($LabelSize,$Edit_CenterOffsetY) v(StartDelay)
AtStartupLalel  = a(as) xy(10,3)

[SchedulerView_AfterUpdate]
@ = $SchedulePage visible(Type == #schtAfterUpdate)

[SchedulerView_Minutely]
@           = $SchedulePage visible(Type == #schtMinutely) oninit(if(MinutesCount<5, MinutesCount=5))
MinuteEvery = sz($LabelSize,a)
MinuteEdit  = t(edit) at(number) a(ls) sz($TimeEditCX) nl(5,59) xy($LabelSize,$Edit_CenterOffsetY) v(MinutesCount)
MinuteLalel = a(as) xy(10,3)

[SchedulerView_Hourly]
@           = $SchedulePage visible(Type == #schtHourly)
HourEvery   = sz($LabelSize,a)
HourEdit    = t(edit) at(number) a(ls) sz($TimeEditCX) nl(1,23) xy($LabelSize,$Edit_CenterOffsetY) v(HoursCount)
HourLalel   = a(as) xy(10,3)

[SchedulerView_Daily]
@           = $SchedulePage visible(Type == #schtDaily)
DayEvery    = sz($LabelSize,a)
DayEdit     = t(edit) at(number) a(ls) sz($TimeEditCX) nl(1,31) xy($LabelSize,$Edit_CenterOffsetY) v(DaysCount) enable(Every == #schEveryDays)
DayLalel    = a(as) xy(10,3) enable(Every == #schEveryDays)

[SchedulerView_Weekly]
$l_firstdayofweek = firstdayofweek()
@               = $SchedulePage visible(Type == #schtWeekly) onok(if(Mode == #schmEnabled && Type == #schtWeekly && !WeekDay0 && !WeekDay1 && !WeekDay2 && !WeekDay3 && !WeekDay4 && !WeekDay5 && !WeekDay6, balloon("SchedulerDaysEmpty")))
WeekDays        = sz($LabelSize,a)
_offset1        = a(ls) xy(115,-14) sz(1,1)
WeekDay0Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(0)?"Normal":"Normal_Red") use($l_firstdayofweek <= 0)
WeekDay1Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(1)?"Normal":"Normal_Red") use($l_firstdayofweek <= 1)
WeekDay2Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(2)?"Normal":"Normal_Red") use($l_firstdayofweek <= 2)
WeekDay3Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(3)?"Normal":"Normal_Red") use($l_firstdayofweek <= 3)
WeekDay4Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(4)?"Normal":"Normal_Red") use($l_firstdayofweek <= 4)
WeekDay5Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(5)?"Normal":"Normal_Red") use($l_firstdayofweek <= 5)
WeekDay6Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(6)?"Normal":"Normal_Red")
WeekDay0Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(0)?"Normal":"Normal_Red") use($l_firstdayofweek > 0)
WeekDay1Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(1)?"Normal":"Normal_Red") use($l_firstdayofweek > 1)
WeekDay2Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(2)?"Normal":"Normal_Red") use($l_firstdayofweek > 2)
WeekDay3Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(3)?"Normal":"Normal_Red") use($l_firstdayofweek > 3)
WeekDay4Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(4)?"Normal":"Normal_Red") use($l_firstdayofweek > 4)
WeekDay5Text    = a(as) xy(5) sz(25) f(s_IsWorkingDay(5)?"Normal":"Normal_Red") use($l_firstdayofweek > 5)
_offset2 = xy(104,2) sz(1,1)
WeekDay0Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay0) use($l_firstdayofweek <= 0)
WeekDay1Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay1) use($l_firstdayofweek <= 1)
WeekDay2Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay2) use($l_firstdayofweek <= 2)
WeekDay3Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay3) use($l_firstdayofweek <= 3)
WeekDay4Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay4) use($l_firstdayofweek <= 4)
WeekDay5Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay5) use($l_firstdayofweek <= 5)
WeekDay6Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay6)
WeekDay0Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay0) use($l_firstdayofweek > 0)
WeekDay1Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay1) use($l_firstdayofweek > 1)
WeekDay2Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay2) use($l_firstdayofweek > 2)
WeekDay3Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay3) use($l_firstdayofweek > 3)
WeekDay4Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay4) use($l_firstdayofweek > 4)
WeekDay5Check   = $Check a(as) xy(16) sz(14,14) v(WeekDay5) use($l_firstdayofweek > 5)


[SchedulerView_Monthly]
@           = $SchedulePage visible(Type == #schtMonthly)
MonthEvery  = sz($LabelSize,a)
MonthEdit   = t(edit) at(number) a(ls) sz($TimeEditCX) nl(1,31) xy($LabelSize,$Edit_CenterOffsetY) v(DaysCount) onchange(if(DaysCount>28, balloon("DaysWarning"), balloon("")))
MonthLalel  = a(as) xy(10,3)

[SchedulerView_PostponeStart]
@      = sz(p,a) xy(,89) visible(switch(Type, "Scheduler_PostponeStart_Show")) extprm(1)
PostponeDescription = sz(p,a)
TimeSpanEdit        = t(edit) at(number) a(ls) sz($TimeEditCX) nl(0,60) xy($LabelSize,20+$Edit_CenterOffsetY) v(StartDelay)
TimeSpanUnits       = a(as) xy(10,3)

[HeuristicParams]
@           = sz(p,a) a(la) xy(,7) ext(1)
Val         = t(slider) a(la) sz(p,30) nl(0,2) extprm(1)
LevelLow    = a(la) sz(a,a)
LevelMed    = a(cs) sz(a,a)
LevelHigh   = a(rs) sz(a,a)

[EditSimpleItem]
@       = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) sz(350,a) btns(Ok(enable(ctl.Name.value))) subst( BodyEx( [EditSimpleItem_Body] ))

[EditSimpleItem_Body]
@       = sz(p,a)
Name    = t(edit) sz(p,a) v(Name) extprm(1) nl(256)
Example = sz(a,a) a(la) xy(,7) f("Normal_Grey") extprm(1)

[PauseTaskGroup]
@           = $SettingsGroup xy(,7) ext(1)
SheduleBtn  = $Button sz(86,24) a(rs) xy(,-3) enable(smode.EnablePeriod) onclick(dialog("PauseTaskScheduleSettings"))
Schedule    = t(check) sz(a,a) v(smode.EnablePeriod)
AppStart    = t(check) sz(a,a) a(la) xy(,13) v(smode.EnableAppList)
AppStartBtn = $Button sz(86,24) a(rs) xy(,-3) enable(smode.EnableAppList) onclick(dialog("PauseTaskAppSettings"))

[PauseTaskScheduleSettings]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [PauseTaskScheduleSettings_Body] ) ) sz(263,a) alias(taskedit) h(4819)

[PauseTaskScheduleSettings_Body]
@           = sz(p,a)
FromLabel   = a(lt)
FromEdit    = t(timeedit) at(notz) a(rs) sz(72,a) v(smode.From)
ToLabel     = a(la) xy(,7)
ToEdit      = t(timeedit) at(notz) a(rs) sz(72,a) v(smode.To)

[PauseTaskAppSettings]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [PauseTaskAppSettings_Body] ) ) sz(320,180) at(resizable) h(15525) alias(taskedit)

[PauseTaskAppSettings_Body]
@       = sz(p,p)
AppList = [PauseTaskAppSettings_Body_AppList]

[PauseTaskAppSettings_Body_AppList]
$crossBrowseApp = ( $IsKAV ? browseapp(Name) : browseappex(Name) )
; ----
@       = $List alias(vector) at(singlesel,noheader,checked) v(smode.AppList) unique(Name == newItem.Name)
App     = text(Name) i(getIconAsync(Name, "unkobj")) v(Enabled) sz(a)
footer  = [Grid.Footer2.Template] subst(Add(onclick( $crossBrowseApp )))

[ProfileStatusMenu]
@           = t(menu) at(enum) v(enabled)
Enabled     = text($Enable)  at(radiolike) v(1)
Disabled    = text($Disable) at(radiolike) v(0)
sep
Details     = text($Details) onclick(dialog("ErrorDescription")) use(state & #StateFlagMalfunction)

[SettingsLevelMenuBase]
@           = t(menu) at(enum)
Level       = [SettingsLevelMenuBase_Level]
sep
Customize   = text($Customize) at(radiolike) extprm(1)

[SettingsLevelMenuBase_Level]
@       = at(enum) extprm(1)
High    = text($High)      at(radiolike) v(#SETTINGS_LEVEL_HIGH)
Medium  = text($Medium)    at(radiolike) v(#SETTINGS_LEVEL_DEFAULT)
Low     = text($Low)       at(radiolike) v(#SETTINGS_LEVEL_LOW)

[SettingsLevelMenu]
@ = [SettingsLevelMenuBase] subst(Level(v(level) onchange(setlevel(level))) Customize(bp(ctl.selected = level == #SETTINGS_LEVEL_CUSTOM)))

[ScanActionMenu]
@               = t(menu) at(enum) v(ScanAction)
AskFinish       = at(radiolike) v(#SCAN_ACTION_POSTPONE) use(type == "ods")
AskDetect       = at(radiolike) v(#SCAN_ACTION_ASKUSER) use(type != "ods" || Interactive)
DontAsk         = at(radiolike) v(#SCAN_ACTION_DISINFECT)
Separator
TryDisinfect    = at(chklike) v(TryDisinfect) enable(ScanAction == #SCAN_ACTION_DISINFECT)
TryDelete       = at(chklike) v(TryDelete) enable(ScanAction == #SCAN_ACTION_DISINFECT)

[WmActionMenu]
@       = t(menu) at(enum) v(ScanAction)
Ask     = at(radiolike) v(#SCAN_ACTION_ASKDETECT)
Block   = at(radiolike) v(#SCAN_ACTION_DETECT)
Allow   = at(radiolike) v(#SCAN_ACTION_REPORT)

[SchedulerModeMenu]
@           = t(menu) at(enum) v(schedule.Mode)
Manual      = at(radiolike) v(#schmManual)
Auto        = at(radiolike) v(#schmAuto) use(type == "updater")
Fixed       = at(radiolike) v(#schmEnabled) text(switch(schedule.Type, "SchedulerType"))
sep
Settings    = text($Settings) extprm(1)

;-------------------------------- OptionsWindow --------------------------------

[OptionsWindow_PanelCaption]
@                    = sz(p,54) ta(lc) f("Header5Med") ext(1) rs(100,0)

[OptionsWindow_Main_Navigator_Btn]
@                    = ext(1) a(at) sz($SettingsNavBtn_W,$SettingsNavBtn_H) at(radiolike) mg(0,0,0,6) bg(ctl.selected ? ctl.SelectedBG.bg : (ctl.hotlight? "SettingsTabbarBtn_Hover": "") )
TypeIcon             = sz(p,p) ia(cc) extprm(1)
SelectedBG           = visible(0)  bg("SettingsTabbarBtn_Sel") extprm(1)

[OptionsWindow_Main_Navigator_Sep]
@                    = a(ls) sz(6,$SettingsNavBtn_H) ext(1)
Item                 = sz(p,p) extprm(1)

[OptionsWindow_Navigator_Btn]
@                    = ext(1) xy(4) mg(8,2) a(la) sz(p,a) at(noowncontent) at(radiolike) bg(ctl.selected ? "GreenSel" : (ctl.hotlight? "GreenHotlight":"") ) 
Icon                 = a(lc) i(s_TaskIcon(ctl.parent.id)) extprm(1)
Descr                = [OptionsWindow_Navigator_Btn_Sel] a(a) extprm(1)

[OptionsWindow_Navigator_Btn_Sel]
@                    = ext(1) mg(5,3) sz(p,a) 
Text                 = extprm(1) text(switch(ctl.parent.parent.id, "ProfileName")) f(ctl.parent.parent.selected ? "Normal_White" : "")

[OptionsWindow]
@ = [StyledWindowT]  at(minimizable,a_apply,a_ok,a_cancel) sz(a,a) alias(taskedit) onapply(l_OptionsWindowPswdEntered || checkPassword(#pwdc_SaveSettings) ? (f_IfErrThenMsg(savesettings(), "SettingsOperationError")) : 0) onclose(if(l_OptionsWindowPswdEntered, PasswordChecked = 0); l_OptionsWindowPswdEntered = 0; true) subst(Footer(subst(Sep(use(0)) Link1(use(1) onclick(dialog("[SettingsResetWizard] alias(reset_product)",p_new(#true))) text($Reset)) )) BodyEx([OptionsWindow_Cont]) )

[OptionsWindow_Cont]
$NavArea             = alias(navigator2) btns(Btns) pages(WorkArea) sz(p,p)
$NavBtn              = at(radiolike)
$NavBtnSett          = [OptionsWindow_Navigator_Btn]
$NavBtnsArea         = mg(3,10,7) xy(,44) rs(0,100) a(la) sz(203,p) at(enum)
$NavWorkArea         = sz(p,p) a(at) rs(0,0)
$UseSingle           = use(1) b() text() alias()
$NavBtnsCaption      = xy(10, -4) a(la) sz(p,a) mg(,9) f("Header2_Grey9")
@                    = sz(718,467) ext(1)
MainNavigator        = [OptionsWindow_Main_Navigator]

[OptionsWindow_Main_Navigator]
@                    = alias(navigator2) btns(Btns) pages(WorkArea) suffix(Main) sz(p,p) 
Backgnd              = bg("TopNavigator") sz(203,p) rs(0,0)
Btns                 = [OptionsWindow_Main_Navigator_Btns]
SepVert              = [OptionsWindow_Main_Navigator_SepVert]
WorkArea             = sz(p,p) rs(0,0)

[OptionsWindow_Main_Navigator_Btns]
$lastSepCtl          = if(f_isInstalled(Updater), ctl.Updater,ctl.Appearance)
@                    = at(enum) a(lt) sz(203,64) rs(100,0) bg("SettingsTabbar")
Protection           = [OptionsWindow_Main_Navigator_Btn] subst(TypeIcon(i("OptionsCategory24,0")) SelectedBG(bg("SettingsTabbarBtn_Sel_fist")))
Scan                 = [OptionsWindow_Main_Navigator_Btn] subst(TypeIcon(i("OptionsCategory24,1")))
Updater              = [OptionsWindow_Main_Navigator_Btn] subst(TypeIcon(i("OptionsCategory24,2"))) use(f_isInstalled(ctl.id))
Appearance           = [OptionsWindow_Main_Navigator_Btn] subst(TypeIcon(i("OptionsCategory24,3")))
Sep1                 = [OptionsWindow_Main_Navigator_Sep] xy(51) subst(Item(bg(if(ctl.Protection.selected, "SettingsTabbarBtn_Shadow", "")))) 
Sep2                 = [OptionsWindow_Main_Navigator_Sep] xy(102) subst(Item(bg(if(ctl.Scan.selected, "SettingsTabbarBtn_Shadow", "")))) 
Sep3                 = [OptionsWindow_Main_Navigator_Sep] xy(153) subst(Item(bg(if($lastSepCtl.selected, "SettingsTabbarBtn_Shadow", "")))) 

[OptionsWindow_Main_Navigator_SepVert]
@                    = sz(1,p) a(at) b(SettingsVertSep) rs(0,0)

[OptionsWindow_Cont.Main.Protection]
@                    = $NavArea
Btns                 = [OptionsWindow_Protection_Navigator_Btns]
WorkArea             = $NavWorkArea h(14868)

[OptionsWindow_Protection_Navigator_Btns]
@                    = $NavBtnsArea
Caption              = $NavBtnsCaption
Protection           = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id)) subst(Descr(subst(Text())))
File_Monitoring      = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))
Mail_Monitoring      = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))
Web_Monitoring       = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))
IM_Monitoring        = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))
HipsTask             = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))
SW2                  = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))
Firewall             = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))
ids                  = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))
Anti_Spam            = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))
AdBlocker            = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))

[OptionsWindow_Cont.Protection]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskName() TaskDesc())) Enable(use(!$IsProtectionNotInstalled)) Body([OptionsWindow_Navigator_WorkArea_Protection_Body]) $UseSingle) h(14868)

[OptionsWindow_Cont.File_Monitoring]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskDesc())) Enable() ) h(24481)

[OptionsWindow_Cont.Mail_Monitoring]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskDesc())) Enable() ) h(24538)

[OptionsWindow_Cont.Web_Monitoring]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskDesc() InfoIcon(onclick(url($HelpURLSettingsWebMonitoring)) visible(1)))) Enable() Body(subst(Action(subst(gr([WMTreat_Group]) OnDetection(subst(Val(ns(httpscan) alias(taskview))) ))) ))) h(24621)

[OptionsWindow_Cont.IM_Monitoring]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskDesc())) Enable() Body([OptionsWindow_Navigator_WorkArea_ContentFilter_Body_IM_Monitoring] $UseSingle)) h(24692)

[OptionsWindow_Cont.HipsTask]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskDesc() InfoIcon(onclick(url($HelpURLSettingsAppCtl)) visible(1)))) Enable(v(HipsTask.enabled)) Body([OptionsWindow_Navigator_WorkArea_SystemWatch_Body_HipsTask] $UseSingle)) ns(Hips) h(24718)

[OptionsWindow_Cont.SW2]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskName() TaskDesc() InfoIcon(onclick(url($HelpURLSettingsSW2)) visible(1)))) Enable(xy(,4,,10) onclick(SW2.enabled = ctl.value; SW2U.enabled = ctl.value )) Body([OptionsWindow_Navigator_SystemWatcher_Body])) use(1) h(26040)

[OptionsWindow_Cont.Firewall]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskDesc() InfoIcon(onclick(url($HelpURLSettingsFirewall)) visible(1)))) Enable() Body([OptionsWindow_Navigator_WorkArea_SystemWatch_Body_Firewall] $UseSingle)) h(24817)

[OptionsWindow_Cont.ids]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskDesc())) Enable() Body([OptionsWindow_Navigator_WorkArea_OnlineSecurity_Body_ids] $UseSingle)) h(25780)

[OptionsWindow_Cont.Anti_Spam]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskDesc())) Enable() Body(subst(Action(use(0)) BottomPlace([custom_Anti_Spam_footer]]))) )  h(25785)

[OptionsWindow_Cont.AdBlocker]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskDesc())) Enable() Body([OptionsWindow_Navigator_WorkArea_ContentFilter_Body_AdBlocker] $UseSingle)) h(25943)

[OptionsWindow_Navigator_WorkArea_Template]
@        = a(lt) sz(p,p) mg(12,12) alias(taskview) use(f_isInstalled(ctl.id)) ext(1)
Caption  = [OptionsWindow_Navigator_WorkArea_Template_Caption] extprm(1)
Enable   = $Check v(enabled) at(noparentdisable) a(la) xy(,4,,23) f("Header0n") extprm(1) lb(v(lockFld(flags.ser(),"enabled")))
Body     = [OptionsWindow_Navigator_WorkArea_Template_Body] extprm(1)

[OptionsWindow_Cont.Main.Scan]
@                    = $NavArea
Btns                 = [OptionsWindow_Scan_Navigator_Btns]
WorkArea             = $NavWorkArea

[OptionsWindow_Scan_Navigator_Btns]
@                    = $NavBtnsArea
Caption              = $NavBtnsCaption
Scan                 = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text())))
Scan_My_Computer     = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))
Scan_Startup         = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))
Scan_Objects         = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))
Scan_Vulnerabilities = [OptionsWindow_Navigator_Btn] use(f_isInstalled(ctl.id))

[OptionsWindow_Cont.Scan]
@ = [OptionsWindow_Navigator_WorkArea_Scan]

[OptionsWindow_Cont.Scan_My_Computer]
@ = [OptionsWindow_Navigator_WorkArea_Template_ods] subst(Caption(subst(TaskName()))) h(23878)

[OptionsWindow_Cont.Scan_Startup]
@ = [OptionsWindow_Navigator_WorkArea_Template_ods] subst(Caption(subst(TaskName()))) h(23895)

[OptionsWindow_Cont.Scan_Objects]
@ = [OptionsWindow_Navigator_WorkArea_Template_ods] subst(Caption(subst(TaskName())) Body(subst(BottomPlace(subst(Settings(subst(StartupMode(xy(,10) subst(Settings(a(la), xy(,10))))))))))) h(23898)

[OptionsWindow_Cont.Scan_Vulnerabilities]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskName() TaskDesc())) Enable(use(0)) Body([OptionsWindow_Navigator_WorkArea_Scan_Vulnerabilities_Body] subst(StartupModeSettings(xy() subst(Settings(a(la), xy(,10)))) ObjectListSettings(xy(,12) subst(Settings(a(la), xy(,10))))) )) h(23899)

[OptionsWindow_Cont.Main.Updater]
@             = $NavArea
Btns          = [OptionsWindow_Updater_Navigator_Btns]
WorkArea      = [OptionsWindow_Updater_Navigator_WorkArea]

[OptionsWindow_Updater_Navigator_Btns]
@             = $NavBtnsArea
Caption       = $NavBtnsCaption
Updater       = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text()))) use(f_isInstalled("Updater"))

[OptionsWindow_Updater_Navigator_WorkArea]
@             = $NavWorkArea
Updater       = [OptionsWindow_Navigator_WorkArea_Template] subst(Caption(subst(TaskName())) Enable(use(0)) Body([OptionsWindow_Navigator_WorkArea_Updater_Body])) h(15909)

[OptionsWindow_Cont.Main.Appearance]
@             = $NavArea
Btns          = [OptionsWindow_Appearance_Navigator_Btns]
WorkArea      = $NavWorkArea

[OptionsWindow_Appearance_Navigator_Btns]
@             = $NavBtnsArea
Caption       = $NavBtnsCaption
Threats       = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text())))
SelfProt      = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text())))
Battery       = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text())))
Compatibility = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text())))
Traffic       = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text()))) use(f_isInstalled("TrafficMonitor"))
Notifications = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text())))
Reports       = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text())))
Feedback      = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text())))
Profiles      = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text())))
Gui           = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text())))
ParCtl        = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text()))) use(f_isInstalled("ParCtl") && $IsKIS)
Manage        = [OptionsWindow_Navigator_Btn] subst(Descr(subst(Text())))

[OptionsWindow_Cont.Threats]
@ = [OptionsWindow_Navigator_WorkArea_Threats] h(15303)

[OptionsWindow_Cont.SelfProt]
@ = [OptionsWindow_Navigator_WorkArea_Template] h(26519) subst(Caption(subst(TaskName() TaskDesc())) Enable(v(EnableSelfProtection) lb() use(!$IsProtectionNotInstalled || $IsKAT)) Body([OptionsWindow_Navigator_WorkArea_Appearance_Body_SelfProt])) use(!$IsRD)

[OptionsWindow_Cont.Battery]
@ = [OptionsWindow_Navigator_WorkArea_Template] h(26520) subst(Caption(subst(TaskName() SepH(visible(1)) TaskDesc([OptionsWindow_Navigator_WorkArea_Appearance_Body_Battery_TaskDesc] visible(1)))) Enable(v(BatterySafe) lb()) Body(use(0))) use(1)

[OptionsWindow_Cont.Compatibility]
@ = [OptionsWindow_Navigator_WorkArea_Template] h(26521) subst(Caption(subst(TaskName() TaskDesc())) Enable(v(AVService.UseActiveDisinfection) lb() use(!$IsRD)) Body([OptionsWindow_Navigator_WorkArea_Appearance_Body_Compatibility])) use(1)

[OptionsWindow_Cont.Traffic]
@ = [OptionsWindow_Navigator_WorkArea_Traffic] h(15308)

[OptionsWindow_Cont.Notifications]
@ = [OptionsWindow_Navigator_WorkArea_Notifications] h(24350)

[OptionsWindow_Cont.Reports]
@ = [OptionsWindow_Navigator_WorkArea_Reports] h(15337)

[OptionsWindow_Cont.Feedback]
@ = [OptionsWindow_Navigator_WorkArea_Feedback] h(24392)

[OptionsWindow_Cont.Profiles]
@ = [OptionsWindow_Navigator_WorkArea_Profiles] h(24437)

[OptionsWindow_Cont.Gui]
@ = [OptionsWindow_Navigator_WorkArea_Gui] h(15352)

[OptionsWindow_Cont.ParCtl]
@ = [OptionsWindow_Navigator_WorkArea_Template] h(26535) subst(Caption(subst(TaskDesc() InfoIcon(onclick(url($HelpURLSettingsParCtl)) visible(1)) )) Enable(use(0)) Body([OptionsWindow_Navigator_WorkArea_ParCtl_Body]) $UseSingle)

[OptionsWindow_Cont.Manage]
@ = [OptionsWindow_Navigator_WorkArea_Template] h(14892) subst(Caption(subst(TaskName() TaskDesc())) Enable(use(0)) Body([OptionsWindow_Navigator_WorkArea_Protection_Body_Manage])) use(!$IsRD)

[OptionsWindow_Navigator_WorkArea_Template_Caption]
@           = a(la) sz(p,a) enable(1) ext(1)
TaskName    = a(lt) sz(a,a) f("Header5Med") text(switch(ctl.parent.parent.id, "ProfileName")) visible(ctl.text) extprm(1)
InfoIcon    = $TaskSettingsInfoIcon visible(0) extprm(1)
SepH        = a(lt) sz(p,1) b(SettingsVertSep) rs(0,0) xy(,30,,7) visible(ctl.parent.TaskDesc.text) extprm(1)
TaskDesc    = a(la) sz(p,a) visible(ctl.text) xy(,,,15) extprm(1)

[OptionsWindow_Navigator_WorkArea_Template_Body]
@           = a(la) sz(p,p) enable(1) ext(1)
Level       = [OptionsWindow_Navigator_WorkArea_3level_Level] extprm(1) enable(enabled) lb(v(0))
Action      = [OptionsWindow_Navigator_WorkArea_3level_Action] extprm(1) enable(enabled) lb(v(0))
BottomPlace = a(la) extprm(1) enable(enabled)

[OptionsWindow_Navigator_WorkArea_3level_Level]
@                 = $MainSettingsGroup ext(1)
CurLevelShifter   = a(lt) xy(55) visible(level!=#SETTINGS_LEVEL_CUSTOM)
CurLevel          = a(as) xy(,12) f("Normal_Bold") text($SettingsLevel) extprm(1)
Val               = t(slider) a(ls) xy(,-7) at(vertical) v(bswitch(level, "LevelGroup3_ProtLevel")) sz(42,90) nl(0,2) onchange(setlevel(level)) visible(level!=#SETTINGS_LEVEL_CUSTOM) extprm(1)
DescriptionSlider = a(as) xy(25,30) sz(p,60) text(switch(name,"OptionsWindowLevelDescription")) visible(level!=#SETTINGS_LEVEL_CUSTOM)
Settings          = $Button_Medium a(la) xy(,10) onclick(windowDlg(switch(name, "SettingsWindowName") )) extprm(1)
DefaultBtn       =  $Button_Medium a(as) xy(10) onclick(setlevel(#SETTINGS_LEVEL_DEFAULT);ctl.enable=0) enable(level!=#SETTINGS_LEVEL_DEFAULT)

[OptionsWindow_Navigator_WorkArea_3level_Action]
@           = $MainSettingsGroup ext(1)
;OnDetection   = [Value] $TaskVal subst(Name() Val(a(as) mg(10) f("Normal_Bold") text($ScanAction) )) extprm(1)
gr = [Treat_Group] a(la) xy(,3) extprm(1)


[OptionsWindow_Navigator_WorkArea_Template_ods]
@ = [OptionsWindow_Navigator_WorkArea_Template] subst(Enable(use(0)) Body(subst(Level(a(lt) xy(,12) subst(Settings(onclick(windowDlg("ScanSettings", p_itemID(name)))))) Action(xy(,12) subst(gr([Treat_Group_ods]))) BottomPlace([custom_scan_footer]) )))

[OptionsWindow_Navigator_WorkArea_Scan_Vulnerabilities_Body]
@                   = a(la) sz(p,p) enable(enabled) ext(1)
StartupModeSettings = [custom_scan_footer_StartupMode] extprm(1)
ObjectListSettings  = [custom_scan_footer_ObjectList] extprm(1)

[custom_scan_footer]
@ = sz(p,p) ext(1) use(name != "Scan_Objects")
Settings = [custom_scan_footer_settings] extprm(1)

[custom_scan_footer_settings]
@           = $MainSettingsGroup xy(,20) ext(1)
StartupMode = [custom_scan_footer_StartupMode] use(!$IsRD) extprm(1)
ObjectList = [custom_scan_footer_ObjectList] extprm(1)

[custom_scan_footer_StartupMode]
@           = a(la) sz(p,a) xy(,10,,10) ext(1)
Settings    = $Button_Medium sz(165,24) onclick(name == "Scan_Vulnerabilities" ? windowDlg("ScanSettings:RunMode", p_CfgMode(2)) : windowDlg("ScanSettings:RunMode")) a(ls) extprm(1)
Scheduler   = [Value] $TaskVal ns(schedule) a(as) xy(7,4) subst( Val(a(at) f("Normal_Bold") text(switch(schedule.Mode, "SchedulerDescription")) ))

[custom_scan_footer_ObjectList]
@           = a(la) sz(p,a) ext(1)
Settings    = $Button_Medium sz(165,24) onclick(windowDlg("ScanObjectsList")) a(ls) xy(,-4) extprm(1)
ObjectList  = [Value] $TaskVal a(as) xy(7,4) subst( Val(a(at) f("Normal_Bold") text(profileDef(name).settings.ScanObjects == ScanObjects ? $ScanObjectListDefault : $ScanObjectListCustom) ))

[ScanObjectsList]
@    = [StyledWindowT_Small] at(dragable,resizable,a_ok,a_cancel) subst( BodyEx( [ScanObjectsList_Scope_Area] ) ) sz(450,300) alias(taskedit) h(15629)

[ScanObjectsList_Scope_Area]
@       = sz(p,p)
Cont    = [ScanObjectsList_Scope_Cont]

[ScanObjectsList_Scope_Cont]
@       = sz(p,p) b(System)
List    = [ScanObjectsList_List] a(la)
Toolbar = [Grid.Toolbar.Template] a(lt) b() t(listtoolbar) subst(\
Delete(enable(!System && depend(canEdit()) ) onclick(if(msg("DeleteItemsConfirm", #m_yesno),ctl.parent.List.delete())) ) \
Edit(enable(!System && depend(canEdit()))) \
)

[ScanObjectsList_List]
@       = $ListToolbar at(noheader) a(la) rs(100,0) alias(vector.ScanObject) v(ScanObjects) unique(ScanObjects == newItem.ScanObjects && ObjectType == newItem.ObjectType,,Enabled = newItem.Enabled; if(!System, Recursive = newItem.Recursive)) enable(!f_IsStateActive(state)) ext(1) extprm(1)
Object  = sz(a) at(checked) i(mergeIcon(s_ScanObjectIcon(ObjectType), Recursive ? "" : "nonrecursive")) text(s_ScanObjectName(ObjectType)) v(Enabled) sort(Runtime,sortup)

[OptionsWindow_Navigator_WorkArea_Scan]
@       = $SettingsWorkArea h(14851)
Caption = [OptionsWindow_Navigator_WorkArea_Template_Caption] subst(TaskName())
Body    = [OptionsWindow_Navigator_WorkArea_Scan_Body]

[OptionsWindow_Navigator_WorkArea_Scan_Body]
@                = sz(p,p) a(la) mg(,12)
IdleScan         = [OptionsWindow_Navigator_WorkArea_Scan_IdleScan] xy(,,,15)
RemovableDisksAutoScan = [OptionsWindow_Navigator_WorkArea_Scan_RemovableDisksAutoScan] xy(,,,15)
CreateShortcuts  = [OptionsWindow_Navigator_WorkArea_Scan_CreateShortcuts]

[OptionsWindow_Navigator_WorkArea_Scan_IdleScan]
@ = $MainSettingsGroup
Description    = a(lt) xy(,12)
EnableIdleScan = $Check v(EnableIdleScan) xy(,10)
IdleScanInfo   = $ParamInfoIcon onclick(url($HelpURLSettingsIdleScan)))
Scan_Qscan_Enable = $Check a(la) v(EnableQscan) onchange(Scan_Qscan.name.ser().setProfileSettingsDirty())

[OptionsWindow_Navigator_WorkArea_Scan_RemovableDisksAutoScan]
@	    = $MainSettingsGroup v(RemovableDrivesAutoScanMode)
Skip    = $Radio xy(,12) v(#dsmSkip)    text(const(s_DriveScanModes(#dsmSkip)))
AskUser = $Radio xy(,10) v(#dsmAskUser) text(const(s_DriveScanModes(#dsmAskUser)))
Full    = $Radio xy(,10) v(#dsmFull)    text(const(s_DriveScanModes(#dsmFull)))
Quick	= $Radio xy(,10) v(#dsmQuick)   text(const(s_DriveScanModes(#dsmQuick)))
Size			= $Check xy(,10) v(RemovableDrivesAutoScanCheckSize) enable(RemovableDrivesAutoScanMode == #dsmFull || RemovableDrivesAutoScanMode == #dsmQuick)
SizeLabel		= sz(a,a) a(rs) xy(,3)
SizeVal			= t(edit) sz(60,a) a(ps) xy(7,-3) at(number) nl(1,102400) v(RemovableDrivesAutoScanMaxSizeMB) enable(RemovableDrivesAutoScanCheckSize && (RemovableDrivesAutoScanMode == #dsmFull || RemovableDrivesAutoScanMode == #dsmQuick))

[OptionsWindow_Navigator_WorkArea_Scan_CreateShortcuts]
@ = $MainSettingsGroup
Scan_My_Computer = [CreateShortcut] ns(Scan_My_Computer)
Scan_Startup = [CreateShortcut] subst(Label()) ns(Scan_Startup)
Scan_Vulnerabilities = [CreateShortcut] ns(Scan_Vulnerabilities)

[CreateShortcut]
@ = a(la) xy(,14) sz(p,a) ext(1)
Label = a(la) sz(200,a) extprm(1)
CreateShortcut = $Button_Large a(rs) xy(,-4) onclick(l_SaveLinkPath = getDesktopPath().addPath(switch(name, "ProfileName")); if(browsefilesave(l_SaveLinkPath, $BrowseSaveLink, "lnk"), createShortcut(l_SaveLinkPath, "", "rundll32.exe", ("\"" + env("ProductRoot").addPath("ShellEx.dll") + "\",StartTask " + name))))

[custom_Anti_Spam_footer]
@ = sz(p,p)
Training = [custom_Anti_Spam_footer_Training] use($BayesAvailable)

[custom_Anti_Spam_footer_Training]
@   = $MainSettingsGroup sz(p,a)
Description = a(lt) xy(,12)
StatusLabel = a(la) xy(,10)
Status = a(as) f("Normal_Bold") xy(,,120,7) text((NeedMoreSpamToTrain + NeedMoreHamToTrain) ? $AntiSpamNeedTrain : $AntiSpamFilled)
Start = $Button_Medium onclick(f_StartAntiSpamTrainingWizard()) a(la) xy(,10)

;------------------TEMP
[test_priority_dlg]
@  = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) ( BodyEx( [test_priority] ) ) alias(taskedit) text("!!!TEMP!!! task: " + $ProfileName) sz(250,220)
;------------------TEMP

[Treat_Group]
@            	= sz(p,a) v(ScanAction)
AskDetect    	= $Radio xy(,9) v(#SCAN_ACTION_ASKUSER)
DontAsk      	= $Radio xy(,10) v(#SCAN_ACTION_DISINFECT)
Action      	= a(as) xy(8) f("Normal_Bold") enable(ctl.DontAsk.selected)
TryDisinfect	= $Check a(la) xy(18,10) v(TryDisinfect) enable(ctl.DontAsk.selected)
TryDelete 		= $Check a(la) xy(18,10) v(TryDelete) enable(ctl.DontAsk.selected)

[Treat_Group_ods]
@            = sz(p,a) v(ScanAction) onshow(l_OldCheck = ScanAction)
AskFinish    = $Radio xy(,10) v(#SCAN_ACTION_POSTPONE) visible(Interactive || l_OldCheck != #SCAN_ACTION_ASKUSER)
AskDetect    = $Radio xy(,10) v(#SCAN_ACTION_ASKUSER) visible(Interactive || l_OldCheck == #SCAN_ACTION_ASKUSER)
;Report       = $Radio xy(,10) v(#SCAN_ACTION_REPORT)
DontAsk      = $Radio xy(,10) v(#SCAN_ACTION_DISINFECT)
Action       = a(as) xy(8) f("Normal_Bold") enable(ctl.parent.value == #SCAN_ACTION_DISINFECT)
TryDisinfect = $Check a(la) xy(18,10) v(TryDisinfect) enable(ctl.parent.value == #SCAN_ACTION_DISINFECT)
TryDelete 	 = $Check a(la) xy(18,10) v(TryDelete) enable(ctl.parent.value == #SCAN_ACTION_DISINFECT)
;TryDelete=$Check a(la) xy(12,10) v(TryDelete) enable(ScanAction == #SCAN_ACTION_DISINFECT)

[WMTreat_Group]
@= sz(p,a) ns(httpscan) alias(taskview) v(ScanAction) a(la) xy(,12)
Ask       = $Radio v(#SCAN_ACTION_ASKDETECT)
Block     = $Radio xy(,10) v(#SCAN_ACTION_DETECT)
Allow     = $Radio xy(,10) v(#SCAN_ACTION_REPORT)

[OptionsWindow_Navigator_WorkArea_ParCtl]
@ = $SettingsWorkArea
Caption     = [OptionsWindow_PanelCaption]
Body        = [OptionsWindow_Navigator_WorkArea_ParCtl_Body]

[OptionsWindow_Navigator_WorkArea_ParCtl_Body]
@               = sz(p,p) a(la) alias(task) b(SettingsVertSep) h(17402)
ToolBar         = [OptionsWindow_Navigator_WorkArea_ParCtl_Body_Users_ListArea_Toolbar] a(la)
Sep             = sz(p,1) a(la) b(SettingsVertSep)
UsersList       = [OptionsWindow_Navigator_WorkArea_ParCtl_Body_Users_ListArea] a(la)

[OptionsWindow_Navigator_WorkArea_ParCtl_Body_Users_ListArea_Toolbar]
$FindUser = users.find("UserId=="+toExpr(ctl.UsersList.List.seldata().UserId))
@               = a(la) sz(p,a) bg("TableBigHeader")
ActivateControl = [ParCtlMainWindow.Label] a(lt) subst(Icon(i( var pSett; pSett = $FindUser.settings; s_ParCtlEx_ComponentEnabled_Icon(!f_IsParCtlSettingsEnabled(pSett.Enabled)) )) Label(text(var pSett; pSett = $FindUser.settings; s_ParCtlEx_Set_Enable(f_IsParCtlSettingsEnabled(pSett.Enabled)))) ) onclick(f_Check_ParctlFirstStartDialog(); var pSett; pSett = $FindUser.settings; pSett.Enabled = f_TryInvertParCtlSettings(pSett.Enabled); true) enable(ctl.UsersList.List.seldata())
Edit            = [ParCtlMainWindow.Label] a(as) mg(2,0,30,0) subst(Icon(i( s_Ico(#ICO_PC_SETTING_16) )) Label(text()) ) onclick(f_ParCtl_ShowWindowEx("", ctl.UsersList.List.seldata().UserId, $FindUser, true)) enable(ctl.UsersList.List.seldata())

[OptionsWindow_Navigator_WorkArea_ParCtl_Body_Users_ListArea]
@    = sz(p,p) enable(ctl.ToolBar.enabled)
List = [OptionsWindow_Navigator_WorkArea_ParCtl_Body_Users_ListArea_List]

[OptionsWindow_Navigator_WorkArea_ParCtl_Body_Users_ListArea_List]
@       = $List alias(vector) v(users) at(noborder) toolbar(ctl.ToolBar) filter(UserId!=".DEFAULT"&&UserId!=".CHILD"&&UserId!=".TEENAGER") at(noheader,singlesel,nosearch) onshow(repopulateSettingsUserAccounts(ser(users));ctl.updatedata();if(!ctl.selcount(),ctl.focus())) onfocus(l_CurrentUserId=UserId) ontimer(10000, if(repopulateSettingsUserAccounts(ser(users)), (ctl.updatedata()) ))
fakeRow = text(toupper(f_UserName(UserId))) sort(,sortup)
row     = [OptionsWindow_Navigator_WorkArea_ParCtl_Body_Users_ListArea_List_Row]

[OptionsWindow_Navigator_WorkArea_ParCtl_Body_Users_ListArea_List_Row]
@            = sz(p,a) at(custom,clickable) mg(,10) bg(ctl.enabled && ctl.selected ? "SelectedListItem" : "White")
Icon         = sz(a,a) xy(10) i(s_ParCtlEx_UserAvatarId2Image(f_ParCtlEx_GetUserAvatar(UserId)))
Name         = sz(a,a) a(as) xy(15,10) f("Header3KGreenLite") text(f_UserName(UserId))
UserControl  = sz(a,a) a(sa) xy(,4) f("KtsDescriptionDGrey") 
ControlState = sz(a,a) a(as) f(settings.Enabled? (ctl.parent.selected ? "KtsHeader0White" : "KtsHeader0Green"):"KtsHeader0Red") text(s_ParCtlEx_User_Enabled(settings.Enabled))
;MinVSize    = sz(1,36) a(la) visible(ctl.parent.selected)

[OptionsWindow_Navigator_WorkArea_Profiles]
@           = $SettingsWorkArea h(5258)
Caption     = [OptionsWindow_Navigator_WorkArea_Template_Caption] subst(TaskName() TaskDesc())
Body        = [OptionsWindow_Navigator_WorkArea_Profiles_Body]

[OptionsWindow_Navigator_WorkArea_Profiles_Body]
@             = sz(p,p) a(la)
EnableGaming  = $Check xy(,4,,12) f("Header0n") v(GamingModeSettings.EnableGaming) onchange(if(GamingModeSettings.EnableGaming && !GamingModeSettings.SuppressInteractive && !bmask(GamingModeSettings.Suppress,0xf0),(GamingModeSettings.Suppress=GamingModeSettings.Suppress|0xf0)&&(GamingModeSettings.SuppressInteractive=true)))
Options       = [OptionsWindow_Navigator_WorkArea_Profiles_Body_Options]

[OptionsWindow_Navigator_WorkArea_Profiles_Body_Options]
@           = $MainSettingsGroup
SuppressInteractive = $Check xy(,12) v(GamingModeSettings.SuppressInteractive) enable(ctl.EnableGaming.value) onchange(if(!GamingModeSettings.SuppressInteractive && !bmask(GamingModeSettings.Suppress,0xf0),GamingModeSettings.EnableGaming=false))
SuppressUpdates = $Check xy(,10) v(bmask(GamingModeSettings.Suppress,0x20)) enable(ctl.EnableGaming.value) onchange(if(!GamingModeSettings.SuppressInteractive && !bmask(GamingModeSettings.Suppress,0xf0),GamingModeSettings.EnableGaming=false))
SuppressSheduleScan = $Check xy(,10) v(bmask(GamingModeSettings.Suppress,0x10)) enable(ctl.EnableGaming.value) onchange(if(!GamingModeSettings.SuppressInteractive && !bmask(GamingModeSettings.Suppress,0xf0),GamingModeSettings.EnableGaming=false))
SuppressManualScan  = $Check xy(,10) v(bmask(GamingModeSettings.Suppress,0x40)) enable(ctl.EnableGaming.value) onchange(if(!GamingModeSettings.SuppressInteractive && !bmask(GamingModeSettings.Suppress,0xf0),GamingModeSettings.EnableGaming=false))

[OptionsWindow_Navigator_WorkArea_Protection_Body]
@               = sz(p,p) a(la)
Interaction     = [OptionsWindow_Navigator_WorkArea_Protection_Body_Interaction]
Pswd            = [OptionsWindow_Navigator_WorkArea_Protection_Body_Pswd]
RunOnStartup    = [OptionsWindow_Navigator_WorkArea_Protection_Body_RunOnStartup]
VK              = [OptionsWindow_Navigator_WorkArea_Protection_Body_VK] use($PersonalOnly && f_isVkbdInstalled())

[OptionsWindow_Navigator_WorkArea_Protection_Body_Interaction]
@       = $MainSettingsGroup
Disable = $Check xy(,12) v(invert(Interactive)) onchange(if(Interactive, ctl.Rollback.value=#PDM2RollBack_ask, ctl.Rollback.value=#PDM2RollBack_auto))
DontDel = $Check xy(18,10) v(invert(DeleteSuspicious)) enable(ctl.Disable.value)

[OptionsWindow_Navigator_WorkArea_Protection_Body_Pswd]
@       = $MainSettingsGroup use(!$IsRD)
Pswd    = $Check xy(,12) v(EnablePswrdProtect) onok(if(!ctl.value, (OPEP = "", #true)))
SetPswd = $Button_Medium xy(,10) a(la) text($Settings3) enable(EnablePswrdProtect) onclick(dialog("PasswordEdit")) onok(if(ctl.Pswd.value && !OPEP, balloon("ErrNoPasswordEntered")))

[OptionsWindow_Navigator_WorkArea_Protection_Body_RunOnStartup]
@            = $MainSettingsGroup use(!$IsRD)
RunOnStartup = $Check xy(,12) v(RunAtSystemStartup) 

[OptionsWindow_Navigator_WorkArea_Protection_Body_Manage]
@       = mg(,-12)
Save    = [OptionsWindow_Navigator_WorkArea_Protection_Body_Manage_Save]
Load    = [OptionsWindow_Navigator_WorkArea_Protection_Body_Manage_Load]
Reset   = [OptionsWindow_Navigator_WorkArea_Protection_Body_Manage_Reset]

[OptionsWindow_Navigator_WorkArea_Protection_Body_Manage_Save]
@     = a(la) xy(,,,20)
Descr = a(la) xy(,12)
Save  = $Button_Medium onclick(if(browsefilesave(l_CfgSaveLoadFilePath, $BrowseForConfig, "cfg"), f_IfErrThenMsg(cfgStorageSave(l_CfgSaveLoadFilePath), "SettingsOperationError"))) a(la) xy(,10)

[OptionsWindow_Navigator_WorkArea_Protection_Body_Manage_Load]
@     = $MainSettingsGroup
Descr = a(la) xy(,12)
Load  = a(la) xy(,10) $Button_Medium onclick(if(browsefileopen(l_CfgSaveLoadFilePath, $BrowseForConfig, "cfg"), f_IfErrThenMsg(cfgStorageLoad(l_CfgSaveLoadFilePath), "SettingsLoadError")))

[OptionsWindow_Navigator_WorkArea_Protection_Body_Manage_Reset]
@     = $MainSettingsGroup
Descr = a(la) xy(,12)
Reset = $Button_Medium a(la) xy(,10) onclick(dialog("[SettingsResetWizard] alias(reset_product)", p_new(#true))) text($Reset)

[OptionsWindow_Navigator_WorkArea_Threats]
@       = $SettingsWorkArea alias(taskview) ns(AVService) h(758)
Caption = [OptionsWindow_Navigator_WorkArea_Template_Caption] subst(TaskName() TaskDesc())
Body    = [OptionsWindow_Navigator_WorkArea_Threats_Body]

[OptionsWindow_Navigator_WorkArea_Threats_Body]
@           = sz(p,p) a(la) 
Threats     = [OptionsWindow_Navigator_WorkArea_Threats_Body_Threats]
Exclusions  = [OptionsWindow_Navigator_WorkArea_Threats_Body_Exclusions]

[OptionsWindow_Navigator_WorkArea_Threats_Body_Threats]
@               = a(la) sz(p,a) xy(,,,20) lb(v(lockFld(state.ser(),"AVService.Excludes,ProcMon.aItems")))
Descr           = t(richedit) at(readonly,nofocus,noborder) sz(p,a) a(pt) ns(AVService.settings)
MalwareDescr    = sz(p,a) ns(AVService.settings) a(la) xy(,7)
UnwantedDescr   = sz(p,a) ns(AVService.settings) a(la) xy(,7) visible(ctl.text)
PackersDescr    = sz(p,a) ns(AVService.settings) a(la) xy(,7) visible(ctl.text)
Settings        = $Button_Medium onclick(dialog("ThreatsSettings")) a(la) xy(,10) text($Settings1)

[OptionsWindow_Navigator_WorkArea_Threats_Body_Exclusions]
@               = $MainSettingsGroup lb(v(lockFld(state.ser(),"AVService.DetectTypeMask2,AVService.DetectTypeMask3,AVService.DetectTypeMask4,AVService.DetectTypeMask5,AVService.PackerTypeMask")))
DescrExcludes   = sz(p,a) a(la) xy(,12)
DescrProcMon    = sz(p,a) a(la) xy(,10)
Settings        = $Button_Medium onclick(dialog("ExclusionsSettings")) a(la) xy(,10) text($Settings2)

[OptionsWindow_Navigator_WorkArea_Notifications]
@       = $SettingsWorkArea h(24350)
Caption = [OptionsWindow_Navigator_WorkArea_Template_Caption] subst(TaskName() TaskDesc())
Body    = [OptionsWindow_Navigator_WorkArea_Notifications_Body]

[OptionsWindow_Navigator_WorkArea_Notifications_Body]
@           = sz(p,p) a(la)
NotifyGroup = [OptionsWindow_Navigator_WorkArea_Notifications_Body_NotifyGroup]
WDescr      = [WarinngBlock] a(lb) use(!$IsRD)

[OptionsWindow_Navigator_WorkArea_Notifications_Body_NotifyGroup]
@                       = sz(p,a) a(la) 
Enable                  = t(check) xy(,4,,12) f("Header0n") sz(a,a) at(noparentdisable) v(EnableNotifications)
Settings                = $Button_Medium onclick(dialog("NotificationSettings")) a(la) text($Settings1) enable(EnableNotifications) xy(,,,20)
Email                   = [OptionsWindow_Navigator_WorkArea_Notifications_Body_NotifyGroup_Email] enable(EnableNotifications)
Sound                   = [OptionsWindow_Navigator_WorkArea_Notifications_Body_NotifyGroup_Sound] enable(EnableNotifications)

[OptionsWindow_Navigator_WorkArea_Notifications_Body_NotifyGroup_Sound]
@	= $MainSettingsGroup 
UseNotificationsSound   = t(check) sz(a,a) a(la) xy(,12) v(NSettings.CheckSound) f("Header0n") use(!$IsRD)
EnableClassicSounds     = t(check) sz(a,a) a(la) xy(18,10) v(Gui.EnableClassicSounds) enable(NSettings.CheckSound) use(!$IsRD)

[OptionsWindow_Navigator_WorkArea_Notifications_Body_NotifyGroup_Email]
@	= $MainSettingsGroup
UseNotificationsMail    = t(check) sz(a,a) a(la) xy(,12) v(NSettings.CheckMail) f("Header0n") use(!$IsRD)
MailSettings            = $Button_Medium a(la) onclick(dialog("Notifications_Mail_Settings")) enable(NSettings.CheckMail) xy(,10) use(!$IsRD)

[OptionsWindow_Navigator_WorkArea_Traffic]
@       = $SettingsWorkArea h(15308)
Caption = [OptionsWindow_Navigator_WorkArea_Template_Caption] subst(TaskName())
Body    = [OptionsWindow_Navigator_WorkArea_Traffic_Body]

[OptionsWindow_Navigator_WorkArea_Traffic_Body]
@           = sz(p,p) a(la) mg(,12)
Ports       = [OptionsWindow_Navigator_WorkArea_Traffic_Body_Ports]
Crypted     = [OptionsWindow_Navigator_WorkArea_Traffic_Body_Crypted]
Proxy       = [OptionsWindow_Navigator_WorkArea_Traffic_Body_Proxy]

[OptionsWindow_Navigator_WorkArea_Traffic_Body_Ports]
@       = $MainSettingsGroup v(TrafficMonitor.AllPorts)
All     = $Radio v(1) xy(,12)
Custom  = $Radio xy(,10) v(0)
Select  = $Button_Large a(la) sz(155,$Button_CY) xy(18,10) enable(!TrafficMonitor.AllPorts) onclick(dialog("TrafficMonitor_Ports"))

[OptionsWindow_Navigator_WorkArea_Traffic_Body_Crypted]
@       = $MainSettingsGroup
ChkAll  = t(check) xy(,12) v(equal(TrafficMonitor.DecodeSSL, 1)) onclick(if(ctl.value,(if(!global.SslWizardCompleted,(f_StartInstallSslCertWizard())))))
;Cert    = $Button_Large a(rs) xy(,-4) enable(TrafficMonitor.DecodeSSL) onclick(generateCertificate(); open(env("PersonalRootCertificate")))
Warn    = a(la) xy(18,10)
Cert    = $Button_Large sz(155,$Button_CY) a(la) xy(18,10) enable(TrafficMonitor.DecodeSSL) onclick(f_StartInstallSslCertWizard())

[OptionsWindow_Navigator_WorkArea_Traffic_Body_Proxy]
@       = $MainSettingsGroup
Desc    = a(la) xy(,12)
Proxy   = $Button sz(a,23) xy(,10) a(la) onclick(dialog("TrafficMonitor_Proxy"))

[OptionsWindow_Navigator_WorkArea_Reports]
@       = $SettingsWorkArea h(764)
Caption = [OptionsWindow_Navigator_WorkArea_Template_Caption] subst(TaskName() TaskDesc())
Body    = [OptionsWindow_Navigator_WorkArea_Reports_Body]

[OptionsWindow_Navigator_WorkArea_Reports_Body]
@           = sz(p,p) a(la)
LogNotImp   = $Check v(FullReport) xy(,4,,12) f("Header0n")
EventLog    = [OptionsWindow_Navigator_WorkArea_Reports_Body_EventLog]
Clear       = [OptionsWindow_Navigator_WorkArea_Reports_Body_Clear]
QB          = [OptionsWindow_Navigator_WorkArea_Reports_Body_QB]

[OptionsWindow_Navigator_WorkArea_Reports_Body_Clear]
@           = $MainSettingsGroup
Descr       = a(la) xy(,12)
Clear       = $Button_Large a(la) xy(,10) onclick(dialog("ClearReports"))

[OptionsWindow_Navigator_WorkArea_Reports_Body_EventLog]
@           = $MainSettingsGroup xy(,15,,20)
;LogFile     = $Check v(ProcMon.LogFiles) xy(,7) use(f_isInstalled("ProcMon"))
;LogReg      = $Check v(ProcMon.LogReg) xy(,7) use(f_isInstalled("ProcMon"))
Period      = [OptionsWindow_Navigator_WorkArea_Reports_Body_EventLog_Period] a(la) xy(,20)
Size        = [OptionsWindow_Navigator_WorkArea_Reports_Body_EventLog_Size] a(la) xy(,10)

[OptionsWindow_Navigator_WorkArea_Reports_Body_EventLog_Period]
@           = sz(p,a)
Period      = [OptionsWindow_Navigator_WorkArea_Reports_Body_EventLog_Period_Period]
PeriodVal   = t(edit) sz(60,a) a(ls) xy($EditBoxesOffset,-3) at(number) nl(1,10000) v(Report.logPeriodVal) enable(Report.logPeriodOn)
PeriodLable = sz(a,a) a(as) xy(7,3)

[OptionsWindow_Navigator_WorkArea_Reports_Body_EventLog_Period_Period]
@           = sz($EditBoxesOffset,a)
Period      = $Check sz(a,a) v(Report.logPeriodOn)

[OptionsWindow_Navigator_WorkArea_Reports_Body_EventLog_Size]
@           = sz(p,a)
Size        = [OptionsWindow_Navigator_WorkArea_Reports_Body_EventLog_Size_Size]
SizeVal     = t(edit) sz(60,a) a(ls) xy($EditBoxesOffset,-3) at(number) nl(50,4000) v(Report.logSizeVal) enable(Report.logSizeOn)
SizeLable   = sz(a,a) a(as) xy(7,3)

[OptionsWindow_Navigator_WorkArea_Reports_Body_EventLog_Size_Size]
@           = sz($EditBoxesOffset,a)
Size        = $Check v(Report.logSizeOn)

[OptionsWindow_Navigator_WorkArea_Reports_Body_Statistics]
@           = $SettingsGroup xy(,14)
Period      = $Check xy(,3) v(Report.statPeriodOn)
PeriodVal   = t(edit) sz(60,a) a(ls) xy(200,-3) at(number) nl(1,10000) v(Report.statPeriodVal) enable(Report.statPeriodOn)
PeriodLable = sz(a,a) a(as) xy(7,3)
Clear       = $Button_Large a(ra) xy(,17) onclick(dialog("ClearStatistics")) use(0)

[OptionsWindow_Navigator_WorkArea_Reports_Body_QB]
@           = $MainSettingsGroup
Period      = [OptionsWindow_Navigator_WorkArea_Reports_Body_QB_Period] a(la) xy(,12)
Size        = [OptionsWindow_Navigator_WorkArea_Reports_Body_QB_Size] a(la) xy(,10)

[OptionsWindow_Navigator_WorkArea_Reports_Body_QB_Period]
@ = sz(p,a)
Period      = [OptionsWindow_Navigator_WorkArea_Reports_Body_QB_Period_Period]
PeriodVal   = t(edit) sz(60,a) a(ls) xy($EditBoxesOffset,-3) at(number) nl(1,10000) v(QBSpanPeriod) enable(QBSpan)
PeriodLable = sz(a,a) a(as) xy(7,3)

[OptionsWindow_Navigator_WorkArea_Reports_Body_QB_Period_Period]
@           = sz($EditBoxesOffset,a)
Period      = $Check v(QBSpan)

[OptionsWindow_Navigator_WorkArea_Reports_Body_QB_Size]
@           = sz(p,a)
Size        = [OptionsWindow_Navigator_WorkArea_Reports_Body_QB_Size_Size]
SizeVal     = t(edit) sz(60,a) a(ls) xy($EditBoxesOffset,-3) at(number) nl(1,4000) v(QBSizeVal) enable(QBSize)
SizeLable   = sz(a,a) a(as) xy(7,3)

[OptionsWindow_Navigator_WorkArea_Reports_Body_QB_Size_Size]
@           = sz($EditBoxesOffset,a)
Size        = $Check v(QBSize)

[OptionsWindow_Navigator_WorkArea_Appearance]
@       = $SettingsWorkArea h(14892)
Caption = [OptionsWindow_PanelCaption]
Body    = [OptionsWindow_Navigator_WorkArea_Appearance_Body]

[OptionsWindow_Navigator_WorkArea_Appearance_Body]
@           = sz(p,p) a(la) mg(12,7)
;VK          = [OptionsWindow_Navigator_WorkArea_Appearance_Body_VK] use($PersonalOnly && f_isVkbdInstalled())
Manage      = [OptionsWindow_Navigator_WorkArea_Protection_Body_Manage]

[OptionsWindow_Navigator_WorkArea_Protection_Body_VK]
@               = $MainSettingsGroup use(!$IsRD) ext(1)
EnableVK        = $Check v(UseVirtualKdb) xy(,12)

[OptionsWindow_Navigator_WorkArea_Appearance_Body_SelfProt]
@               = use(!$IsRD) xy(,-14)
SelfProtDescr   = a(la) xy(18)
ServiceControl  = [OptionsWindow_Navigator_WorkArea_Appearance_Body_SelfProt_ServiceControl]

[OptionsWindow_Navigator_WorkArea_Appearance_Body_SelfProt_ServiceControl]
@                   = $MainSettingsGroup xy(,15) use(!$IsKAT)
ServiceControl      = $Check xy(,12) v(invert(AllowServiceStop)) f("Header0n")
ServiceControlDescr = a(la) xy(18,10)

[OptionsWindow_Navigator_WorkArea_Appearance_Body_Battery_TaskDesc]
@          = a(la) sz(p,a) xy(,,,15)
Paragraph1 = a(la) 
Paragraph2 = a(la) xy(,7)

[OptionsWindow_Navigator_WorkArea_Appearance_Body_Compatibility]
@           = xy(,10)
AdvDisDescr = [OptionsWindow_Navigator_WorkArea_Appearance_Body_Compatibility_AdvDisDescr] use(!$IsRD)
Abs         = $Check v(AVService.UseABS) f("Header0n")
AbsDescr    = a(la) xy(18,10)

[OptionsWindow_Navigator_WorkArea_Appearance_Body_Compatibility_AdvDisDescr]
@ = sz(p,a) a(la) xy(18,-24,,20)
Descr = a(la)
WarningDescr = [WarinngBlock] a(la) xy(,10)

[OptionsWindow_Navigator_WorkArea_Feedback]
@       = $SettingsWorkArea h(766) use(!$IsRD)
Caption = [OptionsWindow_Navigator_WorkArea_Template_Caption] subst(TaskName() TaskDesc(t(richedit) at(readonly,noborder,nofocus) text($KsnTerms)))
Body    = [OptionsWindow_Navigator_WorkArea_Feedback_Body]

[OptionsWindow_Navigator_WorkArea_Feedback_Body]
@       = sz(p,p) a(la)
Ksn     = $Check xy(,4,,12) f("Header0n") v(UseKSN) onok(if(UseKSN && !global.UseKSN, msg("ConfirmFeedback", #m_yesno)))

[OptionsWindow_Navigator_WorkArea_SystemWatch_Body_HipsTask]
@           = sz(p,p) a(la) use(f_isInstalled(ctl.id)) enable(HipsTask.enabled)
Btns        = [OptionsWindow_Navigator_WorkArea_SystemWatch_Body_HipsTask_Btns]
Trust       = [OptionsWindow_Navigator_WorkArea_SystemWatch_Body_HipsTask_Trust]
Misc        = [OptionsWindow_Navigator_WorkArea_SystemWatch_Body_HipsTask_Misc]
;Groups      = [OptionsWindow_Navigator_WorkArea_SystemWatch_Body_HipsTask_Groups]

[OptionsWindow_Navigator_WorkArea_SystemWatch_Body_HipsTask_Btns]
@           = a(la) sz(p,a) xy(,,,15)
Descr       = sz(270,a) 
Resources   = $Button_Medium a(rt) onclick(windowDlg("HipsRules:ConfRes"))
Programs    = $Button_Medium a(ps) onclick(windowDlg("AppRules")) xy(10)

[OptionsWindow_Navigator_WorkArea_SystemWatch_Body_HipsTask_Trust]
@           = $MainSettingsGroup
KSN         = $Check v(invert(bmask(Flags,0x10))) xy(,10)
UpdateKSN   = $Check v(invert(bmask(Flags,0x100))) xy(18,10)
Sign        = $Check v(invert(bmask(Flags,0x20))) xy(,10)
Others      = [OptionsWindow_Navigator_WorkArea_SystemWatch_Body_HipsTask_Trust_Others]

[OptionsWindow_Navigator_WorkArea_SystemWatch_Body_HipsTask_Trust_Others]
@	    = sz(a,a) a(la) xy(,12) v(bmask(Flags,0x40))
UseRating   = $Radio sz(a,a) a(la) xy(,22) v(0)
SetStatus   = $Radio sz(a,a) a(la) xy(,10) v(1)
DefStatus   = [DefaultAppStatus] a(as) xy(10,-4) enable(bmask(Flags,0x40))
AnalyzeTimeout     = a(la) xy(,10)
AnalyzeTimeoutEdit = t(edit) at(number) a(ls) xy(313,) sz(45,a) nl(5,60) v(MaxCalcSR) enable(!ctl.Others.value)
AnalyzeTimeoutSec  = a(as) xy(5,3)

[DefaultAppStatus]
@           = t(combo) sz(a,a) v(DefGr)
LoRest	    = v(#HIPS_APP_ID_LO_REST)
HiRest	    = v(#HIPS_APP_ID_HI_REST)
Untrusted   = v(#HIPS_APP_ID_UNTRUSTED)

[OptionsWindow_Navigator_WorkArea_SystemWatch_Body_HipsTask_Misc]
@           = $MainSettingsGroup
ClearTimeout       = $Check a(la) xy(,17) v(invert(bmask(Flags,0x80)))
ClearTimeoutEdit   = t(edit) at(number) a(la) xy(355,-16) sz(45,a) nl(1,90) v(inout(ClearExistingAppMin/1440, ClearExistingAppMin = ctl.value*1440, true)) enable(ctl.ClearTimeout.value)
ClearTimeOutDays   = a(as) xy(5,3)

[OptionsWindow_Navigator_WorkArea_SystemWatch_Body_HipsTask_Groups]
@       = $MainSettingsGroup
Groups  = t(button) sz(170,23) a(rt) onclick(dialog("HipsGroups", p_fwRules(false)))

[AutomaticExploitPreventionSettings]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [AutomaticExploitPreventionSettings_Body] ) ) alias(taskedit) ns(SW2) sz(350,a) h(59293)

[AutomaticExploitPreventionSettings_Body]
@ = sz(p,a) a(lt) mg(14,14)
Descr = a(lt) sz(a,a) f("Header0n")
Cont = [AutomaticExploitPreventionSettings_Cont]

[AutomaticExploitPreventionSettings_Cont]
@ = a(la) sz(p,a) v(blockAction_)
ActionAsk	= t(radio) v(#THREAT_ACTION_UNKNOWN) a(la) sz(a,a) xy(,14)
ActionAllow	= t(radio) v(#THREAT_ACTION_ALLOW) a(la) sz(a,a) xy(,10)
ActionBlock	= t(radio) v(#THREAT_ACTION_BLOCK) a(la) sz(a,a) xy(,10)

[OptionsWindow_Navigator_SystemWatcher_Body]
@           = a(la) sz(p,p) enable(enabled) ext(1)
AutoExploitPrevention = [OptionsWindow_Navigator_SystemWatcher_AutoExploitPrevention]
Level       = [OptionsWindow_Navigator_WorkArea_3level_SystemWatcher_Level] extprm(1) enable(enabled) lb(v(0))
Action      = [OptionsWindow_Navigator_WorkArea_3level_SystemWatcher_Action] extprm(1) enable(enabled) lb(v(0))
BottomPlace = a(la) extprm(1) enable(enabled)

[OptionsWindow_Navigator_SystemWatcher_AutoExploitPrevention]
@ = a(la) sz(p,a)
Enable = t(check) v(bmask(SW2U.featuresMask, 0x0180)) f("Header0n") a(lt) sz(a,a) 
InfoIcon    = $TaskSettingsInfoIcon a(as) xy(5) extprm(1)
Settings = $Button_Medium a(as) xy(10,-4) text($Settings) enable(ctl.Enable.value) onclick(dialog("AutomaticExploitPreventionSettings"))

[OptionsWindow_Navigator_WorkArea_3level_SystemWatcher_Level]
@                     = $MainSettingsGroup ext(1)
UseBSS                = $Check xy(,10,110) f("Header0n") v(useBss_)
ReactionTypeBtns      = [OptionsWindow_Navigator_WorkArea_3level_SystemWatcher_Level_ReactionTypeBtns] enable(ctl.UseBSS.value)

[OptionsWindow_Navigator_WorkArea_3level_SystemWatcher_Level_ReactionTypeBtns]
@	        = sz(a,a) a(la) onshow(ctl.updatedata()) v(inout(action_ != #SW2_Action_Unknown, s_SetSW2ReactionTypeAuto(ctl.value), true)) xy(,12)
ActionLabel = a(la)
Auto        = $Radio sz(a,a) a(la) xy(,10) v(0)
Manual      = $Radio sz(a,a) a(la) xy(,10) v(1)
ManualType  = [OptionsWindow_Navigator_WorkArea_3level_SystemWatcher_Level_ReactionTypeBtns_ManualActionType] enable(action_ != #SW2_Action_Unknown) 

[OptionsWindow_Navigator_WorkArea_3level_SystemWatcher_Level_ReactionTypeBtns_ManualActionType]
@                    = t(combo) a(la) xy(18,10) sz(a,a) v(inout(f_GetSW2ReactionType(action_), f_SetSW2ReactionType(ctl.parent.value, ctl.value), true))
MoveFileToQuarantine = v(#SW2_Action_Quarantine)
TerminateApp         = v(#SW2_Action_Terminate)
Ignore               = v(#SW2_Action_Allow)
;UserAsk              = v(#SW2_Action_Unknown)

[OptionsWindow_Navigator_WorkArea_3level_SystemWatcher_Action]
$Mb				 = (1024*1024)
@                = $MainSettingsGroup ext(1)
HistoryFileLimit = $Check xy(,10) f("Header0n") v(SW2U.limitRollbackHistory_)
SizeVal          = t(edit) sz(60,a) xy(20, -2) a(as) at(number) nl(20,4000) v(inout(SW2U.rollbackHistorySize_/$Mb, SW2U.rollbackHistorySize_ = ctl.value*$Mb, true)) enable(ctl.HistoryFileLimit.value)
SizeLable        = sz(a,a) a(as) xy(7,3)
ReactionTypeBtns = [OptionsWindow_Navigator_WorkArea_3level_SystemWatcher_Action_ReactionTypeBtns] enable1(ctl.SaveHistory.value)

[OptionsWindow_Navigator_WorkArea_3level_SystemWatcher_Action_ReactionTypeBtns]
@           = sz(a,a) a(la) v(1) xy(,10) at(enum) v(inout(ThreatsDisinfector.rbAskUser_, s_SetSW2_TD_Auto(ctl.value), true ))
ActionLabel = a(la)
Auto        = $Radio sz(a,a) a(la) xy(,10) v(1)
Manual      = $Radio sz(a,a) a(la) xy(,10) v(0)
ManualType  = [OptionsWindow_Navigator_WorkArea_3level_SystemWatcher_Action_ReactionTypeBtns_ManualActionType]  enable(!ThreatsDisinfector.rbAskUser_)  

[OptionsWindow_Navigator_WorkArea_3level_SystemWatcher_Action_ReactionTypeBtns_ManualActionType] 
@                 = t(combo) a(la) xy(18,7) sz(a,a) v(ThreatsDisinfector.rbEnabled_)
MakeRollback      = v(1)
DonotMakeRollback = v(0)
;RequestActionType = v(#SW2_TD_RequestActionType)

[OptionsWindow_Navigator_WorkArea_SystemWatch_Body_Firewall]
@           = use(f_isInstalled(ctl.id)) alias(taskview) enable(1)
Groups      = [OptionsWindow_Navigator_WorkArea_SystemWatch_Body_Firewall_Groups]
Networks    = [OptionsWindow_Navigator_WorkArea_SystemWatch_Body_Firewall_Networks] use(f_isInstalled("NetWatch"))

[OptionsWindow_Navigator_WorkArea_SystemWatch_Body_Firewall_Groups]
@           = $MainSettingsGroup enable(enabled)
Description = a(la) sz(p,a) xy(,10)
Groups      = $Button_Medium a(la) xy(,10) onclick(windowDlg("HipsRules", p_fwTabs(true), p_fwRules(true)))

[OptionsWindow_Navigator_WorkArea_SystemWatch_Body_Firewall_Networks]
@           = $MainSettingsGroup enable(enabled) sz(p,p) xy(0,0)
Nets        = [HipsRules_Tab_Nets1] sz(p,p) xy(,$Group_Shift)

[RollbackAction]
@		= sz(p,a)  v(bAutoRollback) 
ActionOff	= t(radio) v(#PDM2RollBack_off) sz(a,a) a(la)  xy(21,21)
ActionAuto	= t(radio) v(#PDM2RollBack_auto) a(la) sz(a,a) xy(21,14)
ActionAsk	= t(radio) v(#PDM2RollBack_ask) a(la) sz(a,a)  xy(21,14)

[OptionsWindow_Navigator_WorkArea_OnlineSecurity_Body_ids]
@       = use(f_isInstalled(ctl.id)) alias(taskview) enable(1)
Frame1  = [IDSSettings_Body_Settings] a(la) enable(enabled)

[OptionsWindow_Navigator_WorkArea_ContentFilter_Body_IM_Monitoring]
@           = a(la) sz(p,p) enable(1) ext(1) use(f_isInstalled(ctl.id)) alias(taskview)
Directions      = [OptionsWindow_Navigator_WorkArea_ContentFilter_Body_IM_Directions] enable(enabled)
FilterMethods	= [OptionsWindow_Navigator_WorkArea_ContentFilter_Body_IM_Filter_Methods] enable(enabled)

[OptionsWindow_Navigator_WorkArea_ContentFilter_Body_IM_Directions]
@	    = $MainSettingsGroup v(CheckIncomingMessagesOnly)
All	    = $Radio sz(a,a) xy(,12) v(0)
Incoming    = $Radio sz(a,a) a(la) xy(,10) v(1)

[OptionsWindow_Navigator_WorkArea_ContentFilter_Body_IM_Filter_Methods]
@	= $MainSettingsGroup  onok(EmulScriptEnable = EmulEnable; EmulScriptValue = switch(ctl.HeurParams.Val.value, "EmulatorJIMLevels_Web"))
EnableWMUFCheck	        = $Check xy(,12) v(UseWMUF)
EnableAntiphishingCheck = $Check xy(,10) v(UseAntiphishing)
UseHeuristic	= t(check) sz(a,a) xy(,10) a(la) v(EmulEnable)
HeurParams		= [HeuristicParams] xy(,10) a(la) enable(EmulEnable) subst(Val(v(bswitch(EmulValue,"EmulatorLevels_Web"))))


[OptionsWindow_Navigator_WorkArea_ContentFilter_Body_AdBlocker]
@           = use(f_isInstalled(ctl.id)) alias(taskview) enable(1)
Use = [OptionsWindow_Navigator_WorkArea_ContentFilter_Body_AdBlocker_Use] enable(enabled)
Misc = [OptionsWindow_Navigator_WorkArea_ContentFilter_Body_AdBlocker_Misc] enable(enabled)

[OptionsWindow_Navigator_WorkArea_ContentFilter_Body_AdBlocker_Use]
@				= $MainSettingsGroup
UseDatabase		= $Check xy(,12) v(UseDatabase)
ResolveIp		= $Check xy(,10) v(ResolveIpAddresses)

[OptionsWindow_Navigator_WorkArea_ContentFilter_Body_AdBlocker_Misc]
@	     = $MainSettingsGroup
UseBlacklist = $Check xy(,12) v(UseUserBlackList)
Blacklist    = $Button_Medium a(la) xy(,10) text($Settings1) onclick(windowDlg("AdBlockerSettingsBlacklist")) enable(UseUserBlackList)
UseWhiltelist = $Check xy(,22) v(UseUserWhiteList)
Whitelist    = $Button_Medium a(la) xy(,10) text($Settings2) onclick(windowDlg("AdBlockerSettingsWhitelist")) enable(UseUserWhiteList)


[OptionsWindow_Navigator_WorkArea_ContentFilter_Body_ParCtl]
@           = use(f_isInstalled(ctl.id)) text($ProfileName) alias(taskview) enable(1) oninit(l_ask = true)
Enable      = $Check v(enabled) at(noparentdisable) a(lt) xy(10,9) f("Header0n") onok(if( ctl.top.isDirty() && enabled && ctl.enabled && !$FullPwdProtEnabled && l_ask, (f_ParCtlPasswordNotEnabled(l_ask))))
InfoLink    = [InfoLink] a(as) at(noparentdisable) xy(,-5) subst(Icon(onclick(url($HelpURLSettingsParCtl))))
Settings    = $Button_Medium a(rt) xy(,5) text($Settings1) onclick(windowDlg("ParCtlSettings:Profile" + ProfileId)) enable(enabled) onok(if(enabled && !Profiles.find("Id == " + ProfileId).Enabled, balloon("ParCtlProfileMustBeEnabled")))
Profiles    = [OptionsWindow_Navigator_WorkArea_ContentFilter_Body_ParCtl_Profiles] enable(enabled)

[OptionsWindow_Navigator_WorkArea_ContentFilter_Body_ParCtl_Profiles]
@           = $SettingsGroup xy(,14)
ComboLabel  = a(la) xy(,7)
ProfileCombo = [ParCtl_Profile_Type_Ex] a(la) xy(,7)
ProfileText = a(la) xy(,7) ia(lt) i("info")

[ParCtl_Profile_Type_Ex]
@               = a(ls) xy(140,$Edit_CenterOffsetY) sz(220) t(combo) v(ProfileId) items(vector(Profiles) text(s_ParCtlProfileName(Id)) v(Id)) onchanging(parctl_checkPassword(ctl.value))

[OptionsWindow_Navigator_WorkArea_Updater]
@       = $SettingsWorkArea alias(taskview) h(15909)
Caption = [OptionsWindow_PanelCaption]
Body    = [OptionsWindow_Navigator_WorkArea_Updater_Body]

[OptionsWindow_Navigator_WorkArea_Updater_Body]
@           = sz(p,p) a(la) xy(,12)
NullStr  = [OptionsWindow_Navigator_WorkArea_Updater_Body_NullStr]
StartUp  = [OptionsWindow_Navigator_WorkArea_Updater_Body_StartupMode]
Settings = [OptionsWindow_Navigator_WorkArea_Updater_Body_Settings]
Misc     = [OptionsWindow_Navigator_WorkArea_Updater_Body_Misc]

[OptionsWindow_Navigator_WorkArea_Updater_Body_NullStr]
@           = $MainSettingsGroup sz(p,22) a(la)  xy(,,,10)

[OptionsWindow_Navigator_WorkArea_Updater_Body_StartupMode]
@           = a(la) sz(p,a) xy(,,,10) use(!$IsRD)
Settings    = $Button_Medium sz(165,24) onclick(windowDlg("UpdaterSettings:RunMode")) a(la)
Scheduler   = [Value] $TaskVal ns(schedule) a(as) xy(7,4) subst(Val(a(at) f("Normal_Bold") xy(10) text(switch(schedule.Mode, "SchedulerDescription")) ))

[OptionsWindow_Navigator_WorkArea_Updater_Body_Settings]
@           = a(la) sz(p,a) xy(,,,10)
Settings    = $Button_Medium sz(165,24) onclick(windowDlg("UpdaterSettings:Source")) a(la)
Cfg         = [Value] a(as) sz(p,a) xy(7,4) rs(0) subst(Val(f("Normal_Bold") xy(10) a(at) text(Sources.size("Enable") == 1 && Sources.size("Enable && Type == #UPDSRC_KL") == 1 ? $Default : $UpdateSourceCustom)))

[BrowseForUpdaterRetrFolder]
@ = [BrowseForFolder] ext(1) h(24435)

[OptionsWindow_Navigator_WorkArea_Updater_Body_Misc]
@	    = $MainSettingsGroup sz(p,a) a(la)
CheckVer = [OptionsWindow_Navigator_WorkArea_Updater_Body_CheckVer] a(la) xy(,12)

[OptionsWindow_Navigator_WorkArea_Updater_Body_CheckVer]
@	        = a(la) sz(a,a) xy(,10)
CheckNewVer = t(check) sz(a,a) v(bswitch(VerCheck.schedule.Mode, "Schedule_Enable_Control"))

[OptionsWindow_Navigator_WorkArea_Gui]
@       = $SettingsWorkArea h(7052)
Caption = [OptionsWindow_Navigator_WorkArea_Template_Caption] subst(TaskName() TaskDesc())
Body    = [OptionsWindow_Navigator_WorkArea_Gui_Body]

[OptionsWindow_Navigator_WorkArea_Gui_Body]
@       = sz(p,p) a(la)
Skin    = [OptionsWindow_Navigator_WorkArea_Gui_Body_Skin] use(0)
Locale  = [OptionsWindow_Navigator_WorkArea_Gui_Body_Loc] a(la)
Tray    = [OptionsWindow_Navigator_WorkArea_Gui_Body_Tray] a(la)
News    = [OptionsWindow_Navigator_WorkArea_Gui_Body_News] a(la)

[OptionsWindow_Navigator_WorkArea_Gui_Body_News]
@               = $MainSettingsGroup use(!$IsRD)
News    	= $Check xy(,10) v(Gui.EnableNews)

[OptionsWindow_Navigator_WorkArea_Gui_Body_Loc]
@               = $MainSettingsGroup visible(wildcard("*;*",env("LocalizationList"),1) && env("LocalizationAuto") != "1")
UserLocale      = $Combo a(sa) xy(17,7) sz(200, a) alias(LocaleSelect) v(Gui.SkinLoc)

[OptionsWindow_Navigator_WorkArea_Gui_Body_Tray]
@               = $MainSettingsGroup use(!$IsRD)
Tray            = $Check xy(,12) v(Gui.EnableTrayIconAnimation)
Transparency    = $Check xy(,10) v(Gui.EnableTransparentWindows)
Login           = $Check xy(,10) v(EnableLoginShow) use(!$IsVistaOS)

[BrowseForSkinPath]
@ = [BrowseForFolder] ext(1) h(24435)

[OptionsWindow_Navigator_WorkArea_Gui_Body_Skin]
@       = a(la) xy(,,,20) sz(p,a) onok( if( debugTrace(ctl.Enable.value, "Enable") && debugTrace(Gui.SkinPath, "Path") == "", (Enable.value=0;balloon("ErrSkinPath")) ) )
Enable  = $Check xy(,12) f("Header0n") v(Gui.EnableSkinPath) 
Browse  = $Button a(ra) onclick(browseobject(Gui.SkinPath, "BrowseForSkinPath", #SHELL_OBJTYPE_FOLDER)) text("&"+$Browse) xy(,10) enable(ctl.Enable.value)
Path    = t(edit) sz(p,a) a(ps) xy(7,1,18,) v(Gui.SkinPath) enable(ctl.Enable.value)

[OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings]
@       = a(la) sz(p,a) xy(10,14) v(ProxySettings.UseIEProxySettings) enable(ProxySettings.UseProxy)
Auto    = $Radio v(1) use(!$IsRD)
Manual  = $Radio xy(,7) v(0) use(!$IsRD)
Address = [OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Address]
Port    = [OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Port]
UseAuth = $Check xy(,7) v(ProxySettings.ProxyAuth) enable(ProxySettings.UseProxy)
Login   = [OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Login]
Pass    = [OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Pass]
Bypass  = $Check xy(,7) v(ProxySettings.BypassProxyServerForLocalAddresses) enable(ProxySettings.UseProxy)

[OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Address]
@               = sz(190,a) a(la) xy(20,7) rs(100) enable(!ProxySettings.UseIEProxySettings)
AddressLabel    = sz(a,a)
Address         = t(edit) sz(p,a) a(la) xy(,3,10) at(ignorertl) v(ProxySettings.ProxyHost) onok(if(ctl.enabled && !ctl.value, balloon("ErrProxyHostIsMissing")))
Sep             = sz(a,a) a(as) xy(-6,3,)

[OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Port]
@           = sz(90,a) a(as) rs(0) enable(!ProxySettings.UseIEProxySettings)
PortLabel   = sz(a,a)
Port        = t(edit) sz(p,a) a(la) xy(,3) at(number) nl(1,65535) v(ProxySettings.ProxyPort)

[OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Login]
@           = sz(180,a) a(la) xy(20,7) rs(50) enable(ProxySettings.UseProxy && ProxySettings.ProxyAuth)
LoginLabel  = sz(a,a)
Login       = t(edit) sz(p,a) a(la) xy(,3) v(ProxySettings.ProxyLogin)

[OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Pass]
@           = sz(90,a) a(as) rs(50) xy(10) enable(ProxySettings.UseProxy && ProxySettings.ProxyAuth)
PassLabel   = sz(a,a)
Pass        = t(edit) sz(p,a) a(la) xy(,3) at(passwordset) oninit(if(ProxySettings.ProxyPassword=="",ProxySettings.ProxyPassword=crypt(""))) v(bicrypt(ProxySettings.ProxyPassword))

[TrafficMonitor_Proxy]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [TrafficMonitor_Proxy_Body] ) ) sz(350,a) alias(taskedit) ns(Product) h(6675)

[TrafficMonitor_Proxy_Body]
@           = sz(p,a)
UseProxy    = $Check xy(10,14) f("Header0n") v(ProxySettings.UseProxy)
Settings    = [OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings]

[test_priority]
@           = $SettingsGroup xy(,17) text("Scan priority ")
TestValue1  = [test_priority1]

[test_priority1]
@ = v(settings.ScanThreadPriority)
p1 = t(radio) a(sa) xy(,5) text("Normal") v(0)
p2 = t(radio) a(sa) xy(,5) text("Below normal") v(1)
p3 = t(radio) a(sa) xy(,5) text("Lowest") v(2)
p4 = t(radio) a(sa) xy(,5) text("Idle") v(3)
p5 = t(radio) a(sa) xy(,5) text("Background") v(4)
p6 = t(check) a(sa) xy(,8) text("Enable Low I/O priority") v(settings.ScanIoPriority)

[OptionsWindow_Navigator_Btns]
$NavBtn = at(radiolike)

[OptionsWindow_Navigator_WorkArea_Threats_List]
@    = $List a(la) ext(1)
rows = [OptionsWindow_Navigator_WorkArea_Threats_List_row]

[OptionsWindow_Navigator_WorkArea_Threats_List_row]
@           = sz(a,a)
Malware     = [OptionsWindow_Navigator_WorkArea_Threats_List_row_Malicious]
Unwanted    = [OptionsWindow_Navigator_WorkArea_Threats_List_row_Unwanted]
Packers     = [OptionsWindow_Navigator_WorkArea_Threats_List_row_Packers]

[OptionsWindow_Navigator_WorkArea_Threats_List_row_Malicious]
@           = at(node,noplus) f("GridGroup") group(default)
Viruses     = at(checked) v(bmask(DetectTypeMask1,0x0001)) enable(0)
Trojans     = at(checked) v(bmask(DetectTypeMask0,0x0001)) enable(0)
Malicious   = at(checked) v(bmask(DetectTypeMask2,0x0001))

[OptionsWindow_Navigator_WorkArea_Threats_List_row_Unwanted]
@           = at(node,noplus) f("GridGroup") group(default)
AdWare      = at(checked) v(bmask(DetectTypeMask3,0x0001))
PornWare    = at(checked) v(bmask(DetectTypeMask4,0x0001))
RiskWare    = at(checked) v(bmask(DetectTypeMask5,0x0001))

[OptionsWindow_Navigator_WorkArea_Threats_List_row_Packers]
@       = at(node,noplus) f("GridGroup") group(default)
Suspic  = at(checked) v(bmask(PackerTypeMask,#DETPACKER_SUSPICIOUS))
Multi   = at(checked) v(bmask(PackerTypeMask,#DETPACKER_MULTIPACKED))
;Grey    = at(checked) v(bmask(PackerTypeMask,#DETPACKER_GREY))

[KsnInfo]
@    = [StyledWindowT_Small] at(dragable,a_close,nohelp) subst( BodyEx( [OptKsnInfo_Body] ) ) sz(350,328)

[OptKsnInfo_Body]
Text    = t(edit) at(multiline,readonly,vscroll) sz(p,p) text($KsnFile)

[TrafficMonitor_Ports]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [TrafficMonitor_Ports_Body] ) ) sz(430,a) alias(taskedit) h(15316)

[TrafficMonitor_Ports_Body]
@       = sz(p,a)
List    = [TrafficMonitor_Ports_Body_List] sz(p,210)
IncludesList = [TrafficMonitor_Includes_List] a(la) sz(p,210)
Info    = [TrafficMonitor_Ports_Body_Info] sz(p,a)

[TrafficMonitor_Ports_Body_Info]
@       = $SettingsGroup  xy(,7)
Text    =

[TrafficMonitor_Ports_Body_List]
@       = $List alias(vector) xy(,$Group_Shift) v(TrafficMonitor.Ports) unique(Port == newItem.Port,$Duplicate)
Desc    = sz(170,a) at(checked) text(Description) v(Enabled)
Port    = text(Port) sz(170,a)
footer  = [Grid.Footer2.Template] subst(Add(onclick(dialog("TrafficMonitor_PortEdit"))))

[TrafficMonitor_Includes_List]
@		= xy(,$Group_Shift)
Text	= $Check a(lt) v(TrafficMonitor.UseIncludes)
List    = [TrafficMonitor_Includes_List_Body] a(la) enable(TrafficMonitor.UseIncludes)

[TrafficMonitor_Includes_List_Body]
$crossBrowseApp = ( $IsKAV ? browseapp(ImagePath) : browseappex(ImagePath) )
; ----
@			= $List alias(vector) xy(,$Group_Shift) v(TrafficMonitor.Includes) unique(ImagePath == newItem.ImagePath,$Duplicate) enable(!TrafficMonitor.AllPorts)
Description = at(checked) sz(170,a) text(Description) v(Enabled) i(getIconAsync(ImagePath, "unkobj"))
ImagePath	= text(ImagePath) sz(220,a)
footer		= [Grid.Footer2.Template] subst(Add(onclick(if( $crossBrowseApp, dialog("TrafficMonitor_Includes_List_Edit_Dlg")))) Edit(onclick(dialog("TrafficMonitor_Includes_List_Edit_Dlg"))))

[TrafficMonitor_Includes_List_Edit_Dlg]
@  = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [TrafficMonitor_Includes_List_Edit_Dlg_Body] ) ) sz(350,a) h(15317) alias(taskedit) onok(if(!ImagePath, balloon("PathNotSpecified")))) Example())

[TrafficMonitor_Includes_List_Edit_Dlg_Body]
@                   = sz(p,a)
;ImagePathLebel		= a(lt)
Ico					= a(lt)sz(80,a) i(getIconAsync(ImagePath, "unkobj"))
ImagePath			= t(edit) v(ImagePath) a(as) xy(,-1) sz(p) i(getIconAsync(ImagePath, "unkobj"))
DescriptionLebel	= a(la) xy(,7) sz(80,a)
Description			= t(edit) v(Description) a(as) sz(p) xy(,-1)

[TrafficMonitor_PortEdit]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [TrafficMonitor_PortEdit_Body] ) ) sz(300,a) h(5272)

[TrafficMonitor_PortEdit_Body]
@           = sz(p,a)
PortLabel   = a(lt)
Port        = t(edit) a(ls) sz(80) at(number) nl(1,65535) xy(100,) v(Port)
DescLabel   = a(la) xy(,5)
Desc        = t(edit) a(ls) sz(p) xy(100,) v(Description) onok(if(!Description, balloon("NeedName")))

[ExclusionEdit]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [ExclusionEdit_Body] ) )  sz(400,a) onok(if(if(bmask(Triggers, #AVS_fObjectMask),!Object.Mask || Object.Mask == "*",!bmask(Triggers, #AVS_fVerdictMask)) || if(bmask(Triggers, #AVS_fVerdictMask),!VerdictMask || VerdictMask == "*",!bmask(Triggers, #AVS_fObjectMask)), balloon("ObjectOrThreatMissing"))) h(15956)

[ExclusionEdit_Body]
@           = sz(p,a)
PropLabel   = sz(a,a)
PropList    = [ExclusionEdit_PropList]
NameLabel   = a(la) xy(,7) sz(a,a)
Name        = t(edit) a(ls) sz(p) xy(100,) v(Description)
RuleLabel   = sz(a,a) a(la) xy(,10,,5)
Rule        = t(richedit) at(readonly,nofocus,vscroll) a(la) sz(p,160) text($ExclusionMasksDescr)

[ExclusionEdit_PropList]
@    = $List a(ls) sz(p,50) xy(100) at(checked,noheader)
rows = [ExclusionEdit_PropList_row]

[ExclusionEdit_PropList_row]
ObjectMask  = v(bmask(Triggers, #AVS_fObjectMask)) at(checked)
VerdictMask = v(bmask(Triggers, #AVS_fVerdictMask)) at(checked)

[ExclusionObjectEdit]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [ExclusionObjectEdit_Body] ) ) sz(300,a) alias(settings.DetectExcludeEdit) h(15953)

[BrowseForExclusionObjectPath]
@ = [BrowseForFolder] ext(1) h(26757)

[ExclusionObjectEdit_Body]
@       = sz(p,a)
Text    = sz(p,a)
Browse  = $Button a(ra) xy(,7,$Button_Shift) text($Browse) onclick(browseobject(Object.Mask, "BrowseForExclusionObjectPath", #SHELL_OBJTYPE_MASK|#SHELL_OBJTYPE_DRIVE|#SHELL_OBJTYPE_FOLDER|#SHELL_OBJTYPE_FILE);if(fileattr(Object.Mask)&0x10, Object.Mask = Object.Mask.addPath("")) )
Value   = t(edit) a(ps) xy(,1) sz(p) v(Object.Mask)
Recurse = $Check xy(,7,,) v(Object.Recurse)

[ExclusionVerdictEdit]
@  = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [ExclusionVerdictEdit_Body] ) ) sz(300,a) alias(settings) onok(if(!VerdictMask || VerdictMask == "*", balloon("VerdictNotSpecified"))) h(15957)

[ExclusionVerdictEdit_Body]
@ = $DlgBodyAttr sz(p,a)
Text                = sz(p,a)
Value               = t(edit) a(la) sz(p,a) v(VerdictMask) xy(,5)
VerdictObject       = sz(a,a) a(la) xy(,7) visible(Triggers & #AVS_fVerdictPath)
VerdictObjectMask   = t(edit) a(la) xy(,7) sz(p,a) at(readonly) v(VerdictPath.Mask) visible(Triggers & #AVS_fVerdictPath)

[ExclusionTasksEdit]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [ExclusionTasksEdit_TasksList] ) ) sz(300,a) alias(settings) h(15955)

[ExclusionTasksEdit_TasksList]
@       = $List at(noheader) sz(p,150) id(Name) alias(vector.ExceptsTaskList) v(TaskList) prm(s_TaskTypeExcludable) onok(if(!TaskList.size(), balloon("TasksNotSpecified")))
Task    = sz(a) at(checked) text(s_TaskTypeExcludable(Name)) v(Enabled)

;-------------------------------- PasswordEdit --------------------------------

[PasswordEdit]
@           = [StyledWindowT_Small] alias(taskedit) ns(Product) at(dragable,a_ok,a_cancel) subst( BodyEx( [PasswordEdit_Body] ) ) sz(390,a) ext(1) h(15673) 

[PasswordEdit_Body]
@           = sz(p,a)
Pswd        = [PasswordEdit_Pswd]
Sett        = [PasswordEdit_Sett] xy(,12,,) extprm(1)

[PasswordEdit_Pswd]
$PswdEdit       = t(edit) a(rs) sz(150) xy(5,-1) at(password)
@               = $SettingsGroup xy(0,0)
OldPswdText
OldPswdEdit     = $PswdEdit onchange(if(global.OPEP == hashMD5(ctl.value, true), ctl.enabled = 0)) oninit(if(!global.OPEP, ctl.enabled = 0)) onok(if(ctl.enabled && (ctl.NewPswdEdit.value || ctl.ConfPswdEdit.value), (($IsWin2KOS)? msg("ErrPswrdWrong"):balloon("ErrPswrdWrong")) ))
NewPswdText     = a(la) xy(,7)
NewPswdEdit     = $PswdEdit onok(if(!ctl.OldPswdEdit.enabled && !ctl.value && !ctl.ConfPswdEdit.value, (($IsWin2KOS)? msg("ErrNoPasswordEntered"):balloon("ErrNoPasswordEntered")) ))
ConfPswdText    = a(la) xy(,7)
ConfPswdEdit    = $PswdEdit onok(if(!ctl.OldPswdEdit.enabled, (ctl.value == ctl.NewPswdEdit.value ? (OPEP = hashMD5(ctl.value), EnablePswrdProtect = true, l_OptionsWindowPswdEntered = 1) : (($IsWin2KOS)? msg("ErrDifferPswrds"):balloon("ErrDifferPswrds")) )))

[PasswordEdit_Sett]
@                   = $SettingsGroup a(la) sz(p,a) xy(,12,,) ext(1)
SelectedOperations  = [PasswordEdit_Sett_SelectedOperations] xy(33,) extprm(1)

[PasswordEditAutoEnable]
@ = ext(1) [PasswordEdit] onok(if(!AskWhenSaveSetting && !AskWhenExitApp, balloon("PasswordSettSelOpEmpty"), true)) oninit(if(!AskWhenSaveSetting && !AskWhenExitApp, (AskWhenSaveSetting = #true, AskWhenExitApp = #true))) ns(Protection)

;------------- E-mail settings -----------------

[PasswordEdit_Sett_SelectedOperations]
@                   = xy(20,5) sz(a,a) a(la) onok(if(EnablePswrdProtect && !AskWhenSaveSetting && !AskForParCtl && !AskWhenExitApp && !AskOnUninstall, balloon("PasswordSettSelOpEmpty"))) oninit(if(EnablePswrdProtect && !AskWhenSaveSetting && !AskForParCtl && !AskWhenExitApp && !AskOnUninstall, (AskWhenSaveSetting = #true, AskWhenExitApp = #true)))
WhenSaveSetting     = $Check v(AskWhenSaveSetting) xy(,,,13)
ParentalContlrol    = $Check a(sa) v(AskForParCtl) xy(,,,13) extprm(1) use(!$IsKAV)
WhenExitApp         = $Check a(sa) v(AskWhenExitApp) xy(,,,13)
OnUninstall         = $Check a(sa) v(AskOnUninstall) xy(,,,13)

[Templates]
$SettingNotify_Edit = t(edit) a(ls) sz(p) xy(110,$Edit_CenterOffsetY)

[Notifications_Mail_Settings]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [Notifications_Mail_Settings_Body] ) ) alias(taskedit) sz(450,a) h(5334)

[Notifications_Mail_Settings_Body]
FromGroup       = [AdressFrom_Group]
ToGroup         = [To_Group]
SendModeGroup   = [SendMode_Group]

[AdressFrom_Group]
@               = $SettingsGroup sz(p,a)
AdressFromText  = xy(5,3)
AdressFromEdit  = $SettingNotify_Edit v(MailSettings.MailFrom)
SMTPServerText  = a(la) xy(5,7)
SMTPServer      = [AdressFrom_Group_SMTPServer] $SettingNotify_Edit sz(p,a) t()

AccountText     = a(la) xy(5,7)
AccountEdit     = $SettingNotify_Edit v(MailSettings.UsrAccount)
PasswordText    = a(la) xy(5,7)
PasswordEdit    = $SettingNotify_Edit at(passwordset) oninit(if(MailSettings.PSEM=="",MailSettings.PSEM=crypt(""))) v(bicrypt(MailSettings.PSEM))

[AdressFrom_Group_SMTPServer]
PortEdit        = t(edit) at(number) nl(1,65535) a(rt) sz(60,a) v(MailSettings.SMTPPort)
PortText        = a(pt) sz(a,a) xy(7,3,7) text1("asdvasdv")
SMTPServerEdit  = t(edit) a(pt) sz(p) rs(100) v(MailSettings.SMTPServer)

[To_Group]
@               = $SettingsGroup sz(p,a) a(la) xy(,17)
AdressToText    = a(l) xy(5,3)
MailAdressToEdit = [AdressTo_Group_Mail] $SettingNotify_Edit sz(p,a) t()

[AdressTo_Group_Mail]
SendTestMail    = $Button a(rs) xy(0,-1) onclick(send_test_mail()) enable(MailSettings.MailTo && MailSettings.MailFrom && MailSettings.SMTPServer && MailSettings.SMTPPort && MailSettings.UsrAccount ))
AdressToEdit    = t(edit) a(pc) xy(7,0) sz(p) v(MailSettings.MailTo)

[SendMode_Group]
@                   = $SettingsGroup sz(p,a) a(la) xy(,17) v(MailSettings.CurrentSendMode)
ScheduleImmediatly  = t(radio) v(0)
ScheduleManual      = ns(MailSettings.mail_schedule) t(radio) a(la) xy(,7) v(1)
ScheduleChange      = $Button_Medium a(rs) xy(0,-5) enable(MailSettings.CurrentSendMode) onclick(dialog("MailSchedulerDlg",p_Manual(0) ))))

;------------- SendTroublesDialog --------------

[SendTroublesDialogEx]
@ = [SendTroublesDialog] alias(send_traces) h(26740)

[SendTroublesDialog]
@       = [StyledWindowT] at(dragable) sz(550,a) subst( BodyEx( [SendTroublesDialog_BodyEx] ) Footer( [SendTroublesDialog_Footer] ) )

[SendTroublesDialog_BodyEx]
@       = sz(p,a) mg(7)
Header  = [SendTroublesDialog_Body_Header]
Body    = [SendTroublesDialog_Body]

[SendTroublesDialog_Body]
@       = a(la) sz(p,a) oninit(ctl.List.visible = !SendDumps)
List    = [SendTroublesDialog_Body_List]
Footer  = [SendTroublesDialog_Body_Footer]

[SendTroublesDialog_Body_Header]
@       = a(la) sz(p,66) bg("White")
Name    = a(lt) sz(p,a) xy(25,8) f("Header1")
Descr   = a(la) sz(p,a) xy(25,4,25) f("Header0Lite")
Sep     = $StdAreaSeparator a(lb)

[SendTroublesDialog_Footer]
@           = sz(p,$DialogPanelSizeY) a(lb) rs(100,0)
;Sep         = $StdFooterSeparator a(lt)
;Help        = sz(a,a) at(btnlike) a(lc) xy(9,) f("MainFtr") onclick(help()) text($Help) extprm(1) use($IsHelpExists) enable($IsAdvancedDisinfectionStoped)
DoNotSend   = [BtnGlass24] sz($Button_Medium_CX,$Button_CY) a(rc) xy(7) visible(!SendState) onclick(close())
Send        = [BtnGlass24] sz($Button_Medium_CX,$Button_CY) a(pc) xy(7) visible(!SendState) onclick(ReportFiles.find("Send && (Type == 0 || Type == 1 || Type == 3)") ? dialog("SrfDialog") || (msg("SaveTroublesInfo", #m_question|#m_yesno) && browsefilesave(saveToPath, $SaveTroublesInfo, "zip")) : balloon("NothingToSend"))
Close       = [BtnGlass24] sz($Button_Medium_CX,$Button_CY) a(rc) xy(7) visible(SendState)  onclick(close())

[SendTroublesDialog_Body_List]
@           = $List a(la) sz(p,220) alias(vector) v(ReportFiles) group(TroubleGroup,s_TroubleGroup(Type))
Size        = text(f_ObjSize(Size)) sz(100) at(checked) v(Send)
PackSize    = text(f_ObjSize(PackSize)) sz(100)
Path        = text(s_SendTroublesDialog_SysInfo(Type, Path)) sz(270)

[Grid.Groups]
TroubleGroup = [Grid.Group.Template] expand(val == #tSysInfo) text(s_TroubleGroupName(val))

[SendTroublesDialog_Body_Footer]
@           = a(la) sz(p,a) mg(5,5,,5) oninit(ctl.SeeDetails.visible = SendDumps)
SpaceArea   = a(lt) sz(18,0) visible(!ctl.List.visible)
HelpUs      = a(aa) sz(p,a)
SeeDetails  = [SendTroublesDialog_SeeDetails]
SendState   = a(sa) xy(,7) text(s_SendTroublesState(SendState)) visible( SendState >= 2 && SendState <=4 )
Clear       = $Button a(rt) enable(!SendState) visible(!SendDumps)

[SendTroublesDialog_SeeDetails]
@               = a(sa) sz(p,a)
ViewDetails     = a(la) xy(,7)
ViewDetailsL    = a(as) $Link onclick(ctl.List.visible = 1; ctl.SeeDetails.visible = 0)

[SrfDialog]
@ = [EditSimpleItem] subst(Name(v(srfNumber)) Example()) h(7080)

;------------- MailSchedulerDlg --------------

[MailSchedulerDlg]
@    = [StyledWindowT_Small_Tab] sz(405,364) alias(taskedit) ns(MailSettings.mail_schedule) at(dragable,resizable,a_ok,a_cancel) subst( BodyEx( [SchedulerDlg_Tab]  ) ) 

[SchedulerDlg_Tab]
@           = $Tab
Schedule    = [SchedulerDlg_Tab_Schedule]

[SchedulerDlg_Tab_Schedule]
@               = sz(p,p) mg(7,7) h(16074) v(Mode) oninit(if(!p_Manual, Mode = #schmEnabled))
Auto            = t(radio) sz(a,a) v(#schmAuto) xy(,,,7) use(type == "updater")
Manual          = t(radio) sz(a,a) a(la) v(#schmManual) xy(,,,7) visible(p_Manual)
Fixed           = t(radio) sz(a,a) a(la) v(#schmEnabled) visible( !((type != "updater") && !p_Manual) )
SchedulerView   = [SchedulerView] a(la) xy(,17) enable(Mode == #schmEnabled) subst(RunLock(use(0)) RunIfSkipped(use(0)))

[NotificationSettings]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [NotificationSettings_Body] ) ) sz(431,450) at(resizable) alias(taskedit) h(5335)

[NotificationSettings_Body]
@       = $DlgBodyAttr a(lt)
List    = [NotificationSettings_Body_List]

[NotificationSettings_Body_List]
@       = $List alias(tree.Notifications) v(NSettings) filter11(auto,EventID!=#eNotifyThreatQuarantined ) filter(auto, !((EventID == #eNotifyProduct) && (Severity == 4) && $EmptyInstalliation) && (EventID!=#eNotifyThreatQuarantined) )
Event   = sz(200,a) text(switch(EventID,"EventTypes"))
Ballon  = sz(40,a) at(checked) v(CheckTray)
Sound   = sz(40,a) at(checked) v(CheckSound) enable(NSettings.CheckSound && (Severity == #eNotifySeverityError || Severity == #eNotifySeverityCritical) && CheckTray) use(!$IsRD)
Email   = sz(40,a) at(checked) v(CheckMail) enable(NSettings.CheckMail) use(!$IsRD)

[ThreatsSettings]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [OptionsWindow_Navigator_WorkArea_Threats_List] a(lt) ) ) sz(350,340) ns(AVService) alias(taskedit) h(5281)

[ExclusionsSettings]
@    = [StyledWindowT_Small_Tab] at(dragable,a_ok,a_cancel) subst( BodyEx( [ExclusionsSettings_Tab] ) )  sz(356,408) at(resizable) alias(taskedit)

[ExclusionsSettings_Tab]
@               = $DlgBodyAttr $Tab
ExclusionMasks  = [ExclusionsSettings_Tab_ExclusionMasks] h(15952)
TrustedApps     = [ExclusionsSettings_Tab_TrustedApps] h(15950)

[ExclusionsSettings_Tab_ExclusionMasks]
@           = sz(p,p) mg(7,7)
Cont        = [ExclusionsSettings_Tab_ExclusionMasks_Cont]
RuleLabel   = sz(a,a) a(la) xy(,7)
Rule        = t(richedit) at(readonly,nofocus,vscroll) sz(p,p) a(la) xy(,7) alias(descriptor) dataowner(List) text($ExclusionMasksDescr)

[ExclusionsSettings_Tab_ExclusionMasks_Cont]
@       = sz(p,171) b(System)
List    = [ExclusionsSettings_Tab_ExclusionMasks_List]
Toolbar = [Grid.Toolbar.Template] a(lt) b() t(listtoolbar) subst(\
Add(onclick(add(dialog("ExclusionEdit")))) \
Edit(onclick(edit(dialog("ExclusionEdit")))) \
)

[ExclusionsSettings_Tab_ExclusionMasks_List]
@       = $ListToolbar alias(vector) v(AVService.Excludes) 
Object  = sz(p,a) rs(80) at(checked) text(Triggers & #AVS_fObjectMask ? Object.Mask : "*") v(Enable)
Threat  = sz(p,a) rs(20) text(Triggers & #AVS_fVerdictMask ? VerdictMask + if(Triggers & #AVS_fVerdictPath, " " + VerdictPath.Mask) : "*")

[ExclusionsSettings_Tab_TrustedApps]
@       = sz(p,p) mg(7,7) use(!$IsProtectionNotInstalled)
Cont    = [ExclusionsSettings_Tab_TrustedApps_Cont]

[ExclusionsSettings_Tab_TrustedApps_Cont]
$crossBrowseApp = ( $IsKAV ? browseapp(sImagePath) : browseappex(sImagePath) )
$parGridAdd  = onclick(add( if( $crossBrowseApp, (AppID = moduleAppId(sImagePath), nTriggers = #BL_fExclNone, dialog("TrustedAppEdit")) ) ))
$parGridEdit = onclick(edit(dialog("TrustedAppEdit")))
; ----
@       = sz(p,p) b(System)
List    = [ExclusionsSettings_Tab_TrustedApps_List]
Toolbar = [Grid.Toolbar.Template] a(lt) b() t(listtoolbar) subst(\
Add($parGridAdd) \
Edit($parGridEdit) \
)

[ExclusionsSettings_Tab_TrustedApps_List]
@           = $ListToolbar a(la) alias(vector) v(ProcMon.aItems)
App         = sz(p,a) rs(50) at(checked) text(f_UnknownApp(f_AppInfo(AppID).sDescription, sImagePath)) v(bEnabled) i(getIconAsync(sImagePath, "unkobj"))
Path        = sz(a,a) text(sImagePath)
Triggers    = [ExclusionsSettings_Tab_TrustedApps_List_Triggers]

[ExclusionsSettings_Tab_TrustedApps_List_Triggers]
@               = sz(p,a) xy(17,7,) enable(bEnabled) use(0)
ExclOpenFiles   = at(checked) v(bmask(nTriggers, #BL_fExclOpenFiles))
ExclBehavior    = at(checked) v(bmask(nTriggers, #BL_fExclBehavior|#BL_fExclRegistry))
ExclBehaviorChildren = at(checked) v(bmask(nTriggers, #BL_fExclChildsBehavior))
ExclNet         = at(checked) v(bmask(nTriggers, #BL_fExclNet))

[TrustedAppEdit]
@  = [StyledWindowT_Small] alias(taskedit) at(dragable,a_ok,a_cancel) subst( BodyEx( [TrustedAppEdit_BodyEx] ) ) sz(405,a) h(15954)

[TrustedAppEdit_BodyEx]
@           = sz(p,a)
Hdr         = [TrustedAppEdit_Hdr]
Separator   = $StdAreaSeparator
Body        = [TrustedAppEdit_Body] a(la) xy(,7,,30)


[TrustedAppEdit_Hdr]
@       = sz(p,a) mg(7,7)  bg("ColorWindow")
Ico     = sz(32,32) i(const(getIcon(sImagePath, "unkapp", 1)))
Name    = a(ac) xy(7) sz(p,a) f("Header1") text(const(f_UnknownApp(f_AppInfo(AppID).sDescription, sImagePath)))

[TrustedAppEdit_Body]
$l_netParamsMissing = bmask(nTriggers, #BL_fExclNet) && ((bmask(nTriggers, #BL_fExclNetHost) && 0 == Hosts.size()) || (bmask(nTriggers, #BL_fExclNetPort) && 0 == Ports.size()))
$l_MaskTrigger      = !(!(nTriggers & (#BL_fExclOpenFiles|#BL_fExclBehavior|#BL_fExclRegistry|#BL_fExclHipsNoInherit|#BL_fExclChildsBehavior|#BL_fExclNet)))
$isProduct = (AppID == #AppIdProduct)
;----
@           = ext(1) sz(p,a) onok(bEnabled = $l_MaskTrigger; if($l_netParamsMissing, balloon("ExclNetParams"), #true))
ExclOpenFiles        = $Check xy(,7) v(bmask(nTriggers, #BL_fExclOpenFiles)) use(f_isInstalled("File_Monitoring"))
ExclBehavior         = $Check xy(,7) v(bmask(nTriggers, #BL_fExclBehavior|#BL_fExclRegistry)) use(f_isInstalled("Hips"))
NoInherit            = $Check xy(,7) v(inout($isProduct ? true : bmask(nTriggers, #BL_fExclHipsNoInherit), bmask(nTriggers, #BL_fExclHipsNoInherit))) use(f_isInstalled("Hips")) enable(!$isProduct)
ExclBehaviorChildren = $Check xy(,7) v(bmask(nTriggers, #BL_fExclChildsBehavior)) use(f_isInstalled("Hips"))
ExclNet              = $Check xy(,7) v(bmask(nTriggers, #BL_fExclNet)) use(f_isInstalled("TrafficMonitor"))
NetRule              = t(richedit) at(readonly,nofocus,vscroll) a(la) xy(,12) sz(p,100) visible(bmask(nTriggers, #BL_fExclNet)) text($TrustedAppDescr) use(f_isInstalled("TrafficMonitor"))

[Product.reset_items]
@               = ext(1)
File_Monitoring = [File_Monitoring.reset_items] text($File_Monitoring) use(f_isInstalled(ctl.id))
Mail_Monitoring = [Mail_Monitoring.reset_items] text($Mail_Monitoring) use(f_isInstalled(ctl.id))
Web_Monitoring  = [Web_Monitoring.reset_items] text($Web_Monitoring) use(f_isInstalled(ctl.id))
IM_Monitoring   = text($IM_Monitoring) use(f_isInstalled(ctl.id))
HipsTask        = [Hips.reset_items] text($SystemWatch) use(($IsKIS) && f_isInstalled(ctl.id) )
SW2             = [SW2.reset_items] text($SW2) use(f_isInstalled(ctl.id))
Firewall        = [Firewall.reset_items] text($Firewall) use(($IsKIS) && f_isInstalled(ctl.id) )
Anti_Spam       = [Anti_Spam.reset_items] text($Anti_Spam) use(($IsKIS) && f_isInstalled(ctl.id) )
AdBlocker       = [AdBlocker.reset_items] text($AdBlocker) use(f_isInstalled(ctl.id))
ParCtl          = text($ParCtl) use(($IsKIS) && f_isInstalled(ctl.id) )
Scan_Objects    = [Scan_reset]
Updater         = [Updater.reset_items] text($Updater)
TrustedZone     = [TrustedZone_reset] text($TrustedZone)
SafeBanking     = text($SafeBanking) use(($IsKIS) && f_isInstalled(ctl.id) )

[SW2.reset_items]
$SW2Enb     = (SW2.enabled != SW2.reset.enabled)
$CondSW2    = (SW2.settings != SW2.reset.settings)
$ApplSW2    = (SW2.settings = SW2.apply.settings)
$CondSW2U   = (SW2U.settings != SW2U.reset.settings)
$ApplSw2U   = (SW2U.settings = SW2U.apply.settings)
$CondThr    = (ThreatsDisinfector.settings != ThreatsDisinfector.reset.settings)
$ApplThr    = (ThreatsDisinfector.settings = ThreatsDisinfector.apply.settings)
@           = ext(1) v(inout( $SW2Enb || $CondSW2 || $CondSW2U || $CondThr, ($ApplSW2; $ApplSw2U; $ApplThr) ))

[Hips.reset_items]
@               = ext(1) onok(Hips.settings.hipsMakeConsistent())
Applications    = v(inout(Hips.Application != Hips.reset.settings.Application, Hips.Application = Hips.apply.settings.Application))
Rules           = v(inout(Hips.vRuleList != Hips.reset.settings.vRuleList, Hips.vRuleList = Hips.apply.settings.vRuleList))
Resources       = v(inout(Hips.Resource != Hips.reset.settings.Resource, Hips.Resource = Hips.apply.settings.Resource))

[File_Monitoring.reset_items]
@           = ext(1)
ScanObjects = v(inout(File_Monitoring.ScanObjects != File_Monitoring.reset.settings.ScanObjects, File_Monitoring.ScanObjects = File_Monitoring.apply.settings.ScanObjects))

[Mail_Monitoring.reset_items]
@               = ext(1)
DetectMasksList = v(inout(Mail_Monitoring.DetectMasksList != Mail_Monitoring.reset.settings.DetectMasksList, Mail_Monitoring.DetectMasksList = Mail_Monitoring.apply.settings.DetectMasksList))

[Web_Monitoring.reset_items]
@               = ext(1)
TrustedSites    = v(inout(httpscan.TrustedSites != httpscan.reset.settings.TrustedSites, httpscan.TrustedSites = httpscan.apply.settings.TrustedSites))
httpscan        = v(inout(httpscan.HTTPSettings != httpscan.reset.settings.HTTPSettings, httpscan.HTTPSettings = httpscan.apply.settings.HTTPSettings))
WebToolBar
Geo_Security
OnlineBanking

[Firewall.reset_items]
@               = ext(1)
Networks        = v(inout(NetWatch.settings != NetWatch.reset.settings, NetWatch.settings = NetWatch.apply.settings))

[Anti_Spam.reset_items]
@           = ext(1)
WhiteAddrs  = v(inout(Anti_Spam.WhiteAddrs != Anti_Spam.reset.userSett().WhiteAddrs, Anti_Spam.WhiteAddrs = Anti_Spam.apply.userSett().WhiteAddrs))
WhiteWords  = v(inout(Anti_Spam.WhiteWords != Anti_Spam.reset.userSett().WhiteWords, Anti_Spam.WhiteWords = Anti_Spam.apply.userSett().WhiteWords))
BlackAddrs  = v(inout(Anti_Spam.BlackAddrs != Anti_Spam.reset.userSett().BlackAddrs, Anti_Spam.BlackAddrs = Anti_Spam.apply.userSett().BlackAddrs))
BlackWords  = v(inout(Anti_Spam.BlackWords != Anti_Spam.reset.userSett().BlackWords, Anti_Spam.BlackWords = Anti_Spam.apply.userSett().BlackWords))

[AdBlocker.reset_items]
@       = ext(1)
ublist  = v(inout(AdBlocker.UserBlackList != AdBlocker.reset.userSett().UserBlackList, AdBlocker.UserBlackList = AdBlocker.apply.userSett().UserBlackList))
wlist   = v(inout(AdBlocker.UserWhiteList != AdBlocker.reset.userSett().UserWhiteList, AdBlocker.UserWhiteList = AdBlocker.apply.userSett().UserWhiteList))

[Scan_reset]
@                    = text($Scan_Title)
Scan_Objects         = [Scan_Objects_reset]
Scan_My_Computer     = [FullScan_reset]
Scan_Startup         = [QuickScan_reset]
Scan_Vulnerabilities = [Scan_Vulnerabilities_reset]

[Scan_Objects_reset]
@       = text($Scan_Objects)
Objects = v(inout(Scan_Objects.ScanObjects != Scan_Objects.reset.settings.ScanObjects, Scan_Objects.ScanObjects = Scan_Objects.apply.settings.ScanObjects)) text($ScanObjectList)

[Scan_Vulnerabilities_reset]
@       = text($Scan_Vulnerabilities)
Objects = v(inout(Scan_Vulnerabilities.ScanObjects != Scan_Vulnerabilities.reset.settings.ScanObjects, Scan_Vulnerabilities.ScanObjects = Scan_Vulnerabilities.apply.settings.ScanObjects)) text($Scan_Vulnerabilities_Objects)


[FullScan_reset]
@       = text($Scan_My_Computer)
Objects = v(inout(Scan_My_Computer.ScanObjects != Scan_My_Computer.reset.settings.ScanObjects, Scan_My_Computer.ScanObjects = Scan_My_Computer.apply.settings.ScanObjects)) text($ScanObjectList)

[QuickScan_reset]
@       = text($Scan_Startup)
Objects = v(inout(Scan_Startup.ScanObjects != Scan_Startup.reset.settings.ScanObjects, Scan_Startup.ScanObjects = Scan_Startup.apply.settings.ScanObjects)) text($ScanObjectList)

[Updater.reset_items]
@       = ext(1)
Sources = v(inout(Updater.Sources != Updater.reset.settings.Sources, Updater.Sources = Updater.apply.settings.Sources))

[TrustedZone_reset]
Threats     = v(inout(AVService.DetectTypeMask0 != AVService.reset.settings.DetectTypeMask0 || AVService.DetectTypeMask1 != AVService.reset.settings.DetectTypeMask1 || AVService.DetectTypeMask2 != AVService.reset.settings.DetectTypeMask2 || AVService.DetectTypeMask3 != AVService.reset.settings.DetectTypeMask3 || AVService.DetectTypeMask4 != AVService.reset.settings.DetectTypeMask4 || AVService.DetectTypeMask5 != AVService.reset.settings.DetectTypeMask5 || AVService.PackerTypeMask != AVService.reset.settings.PackerTypeMask, (AVService.DetectTypeMask0 = AVService.apply.settings.DetectTypeMask0, AVService.DetectTypeMask1 = AVService.apply.settings.DetectTypeMask1, AVService.DetectTypeMask2 = AVService.apply.settings.DetectTypeMask2, AVService.DetectTypeMask3 = AVService.apply.settings.DetectTypeMask3, AVService.DetectTypeMask4 = AVService.apply.settings.DetectTypeMask4, AVService.DetectTypeMask5 = AVService.apply.settings.DetectTypeMask5, AVService.PackerTypeMask = AVService.apply.settings.PackerTypeMask)))
Excludes    = v(inout(AVService.Excludes != AVService.reset.settings.Excludes, AVService.Excludes = AVService.apply.settings.Excludes))
TrustedApp  = v(inout(ProcMon.aItems != ProcMon.reset.settings.aItems, ProcMon.aItems = ProcMon.apply.settings.aItems))

[SettingsReset]
@       = [StyledWindowT_Small] at(dragable,a_yes,a_no,nohelp) subst( BodyEx( [SettingsReset_Body] ) ) sz(340,a) alias(settings)

[SettingsReset_Body]
@           = $DlgBodyAttr sz(p,a)
Icon        = sz(a,a) a(la) i("w32")
Descr       = sz(p,a) a(at) xy(7,,,10)
Additional  = [SettingsReset_Body_Additional]

[SettingsReset_Body_Additional]
@       = sz(p,a) a(la) use(Children.size())
Descr   = sz(a,a)
List    = [SettingsReset_List] v(ser(Children)) sz(p,87) xy(,5)

[SettingsReset_List]
@       = $List a(la) xy(,7) at(noheader,noroot,notexpandtop) childs(Children) alias(tree) ext(1)
Name    = sz(a,a) at(checked,checkedgroup) text(Name) v(Enabled)

[ExclNetHostsEdit]
@  = [StyledWindowT_Small] at(dragable,resizable,a_ok,a_cancel) subst( BodyEx( [ExclNetHostsEdit_Body] ) ) sz(255,170) h(15958)

[ExclNetHostsEdit_Body]
@       = sz(p,p) a(lt)
List    = [ExclNetHostsEdit_Body_List]

[ExclNetHostsEdit_Body_List]
@       = $List a(la) at(noheader) alias(vector) v(Hosts)
IP      = text(ip(ser(Version))) i("network_types") sz(a,a)
footer  = [Grid.Footer2.Template] subst(Edit(onclick(dialog("ExclNetHostEdit"))))

[ExclNetHostEdit]
@ = [EditSimpleItem] ext(1) subst(Name(v() oninit(ctl.value = ser(Version).ip()) onok(if(!parseIp(ser(Version), ctl.value), balloon("ErrResolvingIp")))) Example()) h(15872)

[ExclNetPortsEdit]
@ = [EditSimpleItem] ext(1) subst(Name(v() oninit(ctl.value = Ports.f_formatPortsSimple()) onok(if(!Ports.parsePorts(ctl.value) && !Ports.size(), balloon("ErrPortsList")))) Example()) h(15959)

[ClearReports]
@    = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [ClearReports_Body] ) ) sz(350,a) h(15340) onok( \
(l_OptionsWindowPswdEntered || checkPassword(#pwdc_SaveSettings))? ( \
if(ctl.Rtp.value, clearRepDb(#dbRTP)); \
if(ctl.Scan.value, clearRepDb(#dbScan)); \
if(ctl.Update.value, clearRepDb(#dbUpdate)); \
if(ctl.NetLogs.value, clearRepDb(#dbNetworkPacketRules));\
if(ctl.SW.value, (clearRepDb(#dbSwObjects), clearRepDb(#dbSwContexts),clearRepDb(#dbSwEvents)));\
if(ctl.ParCtrl.value, (clearRepDb(#dbImMessages), \
						clearRepDb(#dbWebControl), \
						clearRepDb(#dbPersonalInfoControl),\
						clearRepDb(#dbKeywordsControl),\
						clearRepDb(#dbMailMessages),\
						clearRepDb(#dbComputerControl),\
						clearRepDb(#dbAppControl), \
						clearRepDb(#dbFileDownload), \ 
						clearRepDb(#dbInternetControl), \
						clearRepDb(#dbImMessagesStatistics), \
						clearRepDb(#dbImMessagesStatisticsDetail), \
						clearRepDb(#dbWebSiteStatistics), \
						clearRepDb(#dbWebSiteStatisticsDetail), \
						clearRepDb(#dbFileDownloadStatistics), \
						clearRepDb(#dbFileDownloadStatisticsDetail), \
						clearRepDb(#dbAppControlStatistics), \
						clearRepDb(#dbAppControlStatisticsDetail))); true) : false)

[ClearReports_Body]
Intro
Rtp     = $Check xy(,17) use(!$IsProtectionNotInstalled)
Scan    = $Check xy(,7) v(1)
Update  = $Check xy(,7) v(1)
NetLogs = $Check xy(,7) v(1) use(f_isInstalled("Firewall"))
ParCtrl = $Check xy(,7) v(1) use(f_isInstalled("ParCtl"))
SW		= $Check xy(,7) v(1) 
;Footer  = sz(0,50) a(la)

[ClearStatistics]
@  = [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [ClearStatistics_Body] ) ) sz(350,a) h(6499) onok( (l_OptionsWindowPswdEntered || checkPassword(#pwdc_SaveSettings))? ( if(ctl.App.value, clearRepDb(#dbAppStatistic)); if(ctl.Bl.value, clearRepDb(#dbBLStatistic)); if(ctl.Update.value, clearRepDb(#dbUpdStatistic)); true) : false)

[ClearStatistics_Body]
@       = sz(p,a)
Intro
App     = $Check xy(,17) v(1)
Bl      = $Check xy(,7) v(1)
Update  = $Check xy(,7) v(1)

[NewsSettings]
@ 	= [StyledWindowT_Small] at(dragable,a_ok,a_cancel) subst( BodyEx( [NewsSettings_Body] ) ) alias(taskedit) sz(500,a) h(47814)

[NewsSettings_Body]
@	= sz(p,a)
Intro
Check	= $Check f("Header0n") v(Gui.EnableNews) xy(,17,,7)
