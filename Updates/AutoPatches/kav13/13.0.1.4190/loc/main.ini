[Templates]
$Button_CX                                  = 75
$Button_CY                                  = 24
$Button_Large_CX                            = 110
$Button_Large_CY                            = 32
$Tab_ParCtl_Left_CX                         = 145
$Tab_ParCtl_Right_CX                        = 128
$Tab_ParCtl_CY                              = 24
$Tab                                        = t(tab) sz(p,p)
;$Button                                     = t(button) sz(a,$Button_CY, $Button_CX)
;$Button_Medium                              = t(button) sz(a,$Button_CY, $Button_Medium_CX)
;$Button_Large                               = t(button) sz(a,$Button_CY, $Button_Large_CX)
$Button                                     = [BtnGlass24] sz(a,$Button_CY, $Button_CX)
$Button_Large                               = [BtnGlass24] sz(a,$Button_CY, $Button_Large_CX)
$Button_Medium                              = [BtnGlass24] sz(a, $Button_CY, $Button_Medium_CX)
$ToolButton                                 = at(chklike,rememberdata) bg("ToolButton,1,0,0,1,0,0") sz(21,21)
$ListButton                                 = $Button alias(listbutton)
$Check                                      = t(check) sz(a,a) a(la)
$CheckForGroup                              = t(check) sz(a,a) a(lt) at(noparentdisable) xy(0,-21)
$Radio                                      = t(radio) sz(a,a) a(la)
$Combo                                      = t(combo) sz(p,a) a(la)
$IpAddr                                     = t(ipaddress)
$Link                                       = t(hotlink) sz(a,a) f("Hotlink_Normal")
$ListTransp                                 = t(list) sz(p,p)
$List                                       = $ListTransp bg("ColorWindow")
$ListToolbarOffsetY                         = 30
$ListToolbar                                = $List at(noborder) a(lt) xy(,$ListToolbarOffsetY) toolbar(ctl.Toolbar)
$TB_ShiftFirst                              = 5
$TB_ShiftNext                               = 7
$TB_ShiftFirst_Btn                          = 2
$TB_ShiftNext_Btn                           = 1
$TB_Btn                                     = [TB_Button]
$GroupBox                                   = t(group) f("GroupHeader") b1(GroupBox)
$GroupBoxLink                               = t(group) f("GroupHeaderLink") b(GroupBox)
$SettingsGroup                              = t(box) f("SetGroupHeader") b(Topline_grey) a(la) sz(p,a) mg(8,8,0,0) xy(0,$Group_Shift)
$MainSettingsGroup                          = t(box) f("SetGroupHeader") b(Topline_grey) a(la) sz(p,a) xy(,,,20)
$Control_Shift                              = 7
$Button_Shift                               = 7
$Group_Shift                                = 7
$Edit_CenterOffsetY                         = -3
$Edit_CommentOffsetX                        = 4
$TimeEditCX                                 = 80
$Static_Shift                               = xy(0,0,0,3)
$Static_ShiftAfter                          = xy(0,3,0,0)
$ButtonsLineSizeX                           = 81
$ButtonsLineSizeY                           = 31

$DialogPanelSizeY_top                       = 30
$DialogPanelSizeYTab_top                    = 41
$TabOffset_y                                = 11
$DialogPanelSize_DiffTabStd                 = 11
$DialogPanelSizeY_bottom                    = 44
$DialogPanelSizeY                           = 36
$Border_Shift                               = 10

;Body border
$BodyBorder_Top                             = 29; $DialogPanelSizeY_top - 1
$BodyBorder_Bottom                          = 43 ; $DialogPanelSizeY_bottom - 2
$BodyBorder_Shift                           = 9  ; $Border_Shift - 1

$DialogFooterSizeY_InstallerWithSep         = 56
$DialogFooterSizeY_Installer                = 56
$Button_Installer                           = [BtnGlass24] sz(82,$Button_CY)
$Button_Shift_Installer                     = 9

$ButtonsLineMediumSizeX                     = 109
$RadioCommentShift                          = 18
$LValueLeftArea                             = 140
$LValueShift                                = xy(150)
$RadioCommentShiftXY                        = xy($RadioCommentShift,4)
$MenuCustom                                 = t(dialog) bg("ComboBox_sel") sz(a,a) at(ontop,nocaption,noactivate,menulike) mg(1,1)
$MenuCustomItem                             = sz(a,a) at(btnlike,noowncontent) a(la) bg((ctl.hotlight || ctl.selected) ? "GreenHotlight" : "")
$MessageDialogMinSize                       = sz(260,110)
$DlgAttrBase                                = t(dialog) mg(7,7) at(dragable) bg((isOsGuiThemed && !isTabbed && const(!$IsInitMode)) ? "ColorWindow" : "ColorWindowClassic")
$DlgAttr                                    = $DlgAttrBase at(a_ok,a_cancel)
$Dlg                                        = $DlgAttr
$DlgBodyAttr                                = at(lt) sz(p,p)
$Wizard                                     = t(dialog) mg(7,7) at(dragable,wizard) at(a_next,a_back,a_cancel)
$WizardPage                                 = sz(p,p) xy(,,,$DialogPanelSizeY)
$GroupBody                                  = a(la) bg("GroupBody") sz(p,a) rs(100,0) xy(,7)
$ValPrm                                     = extprm(1) t(v) at(hidden)
$RichText                                   = t(richedit) at(readonly,noborder,nofocus)

$TopWindows_Min_X                           = 723
$TopWindows_Min_Y                           = 514
$shiftgw_left                               = 25

$ScanSettings_Min_X                         = 400

------------Customized URLS---------------
$ForumDescr                                 = $ForumDefDescr
$ParentalControlURL                         = f_GetInterceptorLink("parental_control")

;-- MainWindow --
$TaskTab                                    = a(lt) bg("MainWindowPanelBg") sz(480,374) rs(0,0) mg(16,15,16,16)
$TaskWorkArea                               = a(lt) sz(p,p)
$TaskPanel                                  = a(lt) sz(p,p)
$TaskView                                   = $TaskPanel alias(taskview)
$TaskSubGroup                               = alias(taskview) sz(p,a) rs(0,0) a(la) xy(,,,7) ext(1)
$TaskValShift                               = xy(,5)
$TaskVal                                    = [TaskVal] a(la) $TaskValShift
$TaskInfoIcon                               = a(as) sz(a,a) i("info,0,1,0,0,0,1") at(btnlike) xy(7,7,,1)
$TaskSettingsInfoIcon                       = $TaskInfoIcon xy(7,6,,1)
$ParamInfoIcon                              = $TaskInfoIcon xy(4,1,,7)

;--- DlgWizard ------
$DlgWizardInnerAttr                         = sz(p,p) 
$WizardGroupNext                            = t(box) f("SetGroupHeader") b(Topline_light) a(la) sz(p,a) mg(8,8,0,0) xy(0,$Group_Shift)
$Duplicate                                  = msg("Duplicate", #m_error|#m_res_cancel)

;--- Charts ------
$ChartStatPctrl                             = t(chartstat) mg(0,0) refresh(1000)
$ChartStat                                  = t(chartstat) mg(10,10) refresh(1000)
$ChartStatAxisY                             = t(chartaxisval) b(AxisLine) sz(32,a) xy(2) ticks(a) ticktype(1) drawpos(0) min(0) max(a) f("AxisLineText")
$ChartStatAxisX                             = t(chartaxiscat) b(AxisLine) sz(a,4)  ticks(2) drawpos(1)
$ChartStatData                              = t(chartseries) alias(blstat) mg(5) prm(#dbStatistics)
$DynamicChartAxisY                          = t(chartaxisval) b(AxisLine_Green) sz(24,a) xy(-1) ticks(4) ticktype(1) drawpos(0) min(0) max(a) f("AxisLineText")
$DynamicChartAxisX                          = t(chartaxiscat) b(AxisLine_Green) sz(a,1)  ticks(2) drawpos(1)
$TableStyleCaption1                         = f("Normal_Bold") at(fixstyle) a(lt) xy(,10) mg(5,0)
$TableStyleHeader                           = f("Normal") at(fixstyle) a(ls) xy(,16) sz(p,23) mg(5,4)
$TableStyleColumn1                          = f("Normal") at(fixstyle) a(rs) xy(12,) sz(,23)
$TableStyleRow                              = f("Normal") at(fixstyle) a(la) xy(,1) sz(p,23) mg(5,4)
$ProfileHome_Report                         = window("MainReport:" + s_Profile2ProfileGroup_Reports(name), p_postInit(if(!persistent, "ctl.Report.selgroup(" + id + ")")))
$KavDescr                                   = a(lb) xy(,10) i("info") ia(lt) sz(p,a) use($IsKAV)

$ChartPie                                   = t(chartpie) bg("ColorWindow") radius(50,100) refresh(1000)
$PieData                                    = t(chartseries) alias(blstat) prm(#dbStatistics)
$EmptyPieBackground                         = at(default) bg("ChartEmpty")

$StdAreaSeparator                           = sz(p,1) a(la) b(SettingsVertSep) rs(100,0)
$StdFooterSeparator                         = $StdAreaSeparator b(BlackSeparator)

$FooterLinkSep                              = bg("FooterLinkSep") sz(a,a)
;$FooterLinkSep                              = [LabelShadow2] f("MainFtr") text("|")

$IsAdvancedDisinfectionStoped = !s_IsStateRunning(AdvDis.state)

$OpenScanProgressWindow = window("QMLTaskManager")

; разделительная линия для страниц главного окна
$TaskSep_Temp     = b(MainTaskSep) sz(p,1) a(la) xy(,7,,8)

;------------- Dialog Panels ------------

[DialogPanel]
$LinkYBottomOffset  = 11
@                   = a(lb) xy(2,2,2,0) sz(p,$DialogPanelSizeY) ext(1) rs(100,0)
BtnsGroup           = [DialogPanel_BtnsGroup]
;Bckgnd              = sz(700,a) bg("DlgFooter") a(rt) extprm(1)
;ResizeBackground    = sz(p,p) rs(100,0) bg("DlgFooter_rs") a(pt) extprm(1)
ResizeBackground    = sz(p,p) rs(100,0) a(pt) extprm(1)
;Sep                 = $StdFooterSeparator a(lt) extprm(1)
WndResizer          = a(rb) sz(a,a) bg("WndResizer") xy(-4,-4)
Body                = sz(p,p) a(ac) use(0) extprm(1)
Help                = [Footer_Linc] a(lb) xy(15,$LinkYBottomOffset) onclick(help()) text($Help) extprm(1) use($IsHelpExists) enable($IsAdvancedDisinfectionStoped)
S1                  = a(ac) xy($Button_Shift,,$Button_Shift) visible(ctl.Link1.visible)
Link1               = sz(a,a) [Footer_Linc]  a(ab) xy(,$LinkYBottomOffset) f($FooterLincFont) use(0) extprm(1)
S2                  = a(ac) xy($Button_Shift,,$Button_Shift) visible(ctl.Link2.visible)
Link2               = sz(a,a) [Footer_Linc]  a(ab) xy(,$LinkYBottomOffset) f($FooterLincFont) use(0) extprm(1)
S3                  = a(ac) xy($Button_Shift,,$Button_Shift) visible(ctl.Link3.visible)
Link3               = sz(a,a) [Footer_Linc]  a(ab) xy(,$LinkYBottomOffset) f($FooterLincFont) use(0) extprm(1)

[Footer_Linc]
$FooterLincFont = ctl.parent.hotlight? "MainFtr_Hovered" : "MainFtr"
@ = sz(a,a) at(clickable,btnlike,noowncontent) ext(1)
B   = at(underlineoff) sz(a,a) xy(1,1) f("MainFtr_Shadow") bp(ctl.text = ctl.parent.text; ctl.hotlight = ctl.parent.hotlight; ctl.focused = ctl.parent.focused) extprm(1)
F   = at(underlineoff) sz(a,a)         f($FooterLincFont)  bp(ctl.text = depend(ctl.parent.text); ctl.hotlight = ctl.parent.hotlight; ctl.focused = ctl.parent.focused) extprm(1)


[DialogPanel_BtnsGroup]
@           = sz(a,a) rs(0,0) a(rb) xy(7,3) extprm(1)
Confirm     = [BtnGlass32] a(lt) xy($Button_Shift)
YesToAll	= [BtnGlass32] a(at) xy($Button_Shift)
WizardGroup = [DialogPanel_BtnsGroup_WizardGroup] extprm(1)
No          = [BtnGlass32] a(at) xy($Button_Shift) extprm(1)
Cancel      = [BtnGlass32] a(at) xy($Button_Shift) onclick(close()) extprm(1)
Apply       = [BtnGlass32] a(at) xy($Button_Shift)

[DialogPanel_BtnsGroup_WizardGroup]
@       = sz(a,p) a(at) rs(0,0)
Back    = [BtnGlass32] xy($Button_Shift) extprm(1)
Next    = [BtnGlass32] a(at) extprm(1)

;------------- Button Glass ------------

[BtnGlass24]
$btnWd = 10
$btnIndexes = 1,2,1,1,1,0
@    = t(bmpbutton) at(noowncontent) sz(a,$Button_CY) ta(cc) f(depend(ctl.enabled) ? "BtnGlass" : "BtnGlassGray")
L    = bg("BtnGlass24Left,$btnIndexes") sz($btnWd,p) a(lt) extprm(1)
R    = bg("BtnGlass24Right,$btnIndexes") sz($btnWd,p) a(rt) extprm(1)
M    = bg("BtnGlass24Middle,$btnIndexes") sz(p,p) xy($btnWd,,$btnWd) extprm(1)
Cont = [BtnGlass_Cont] mg(7) sz(a,a) a(cc) extprm(1)
MinSize = a(lt) sz($Button_CX,$Button_CY) extprm(1)

[BtnGlass32]
$btnWd = 15
;$btnIndexes = 3,1,4,5,3,2
$btnIndexes = 1,2,1,1,1,0
@    = t(bmpbutton) at(noowncontent) sz($Button_CX,$Button_Large_CY) ta(cc) f(ctl.enabled ? "BtnGlass" : "BtnGlassGray")
L    = bg("BtnGlassLeft,$btnIndexes") sz($btnWd,p) a(lt) extprm(1)
R    = bg("BtnGlassRight,$btnIndexes") sz($btnWd,p) a(rt) extprm(1)
M    = bg("BtnGlassMiddle,$btnIndexes") sz(p,p) xy($btnWd,,$btnWd) extprm(1)
Cont = [BtnGlass_Cont] mg(7) sz(a,a) a(cc) extprm(1)

[BtnGlassFix]
@    = t(bmpbutton) at(noowncontent,btnlike) sz(a,$Button_CY) f(ctl.enabled ? "BtnGlass" : "BtnGlassGray")
L    = bg( s_ButtonFixBg_L(s_ProdStateSeverity(ProdStateId)) ) sz(20,p) a(lt) extprm(1)
R    = bg( s_ButtonFixBg_R(s_ProdStateSeverity(ProdStateId)) ) sz(20,p) a(rt) extprm(1)
M    = bg( s_ButtonFixBg_M(s_ProdStateSeverity(ProdStateId)) ) sz(p,p) xy(6,,6) extprm(1)
Text = [LabelShadow1] mg(15) a(lt) xy(,4) sz(a,a) at(underlineoff) text(ctl.parent.text) f(ctl.parent.font) subst(B(at(underlineoff)) F(at(underlineoff)) ) extprm(1)

[BtnGlass_Cont]
@ = ext(1)
Icon = a(lc) sz(a,a) extprm(1)
Text = [LabelShadow2] a(ac) at(underlineoff) text(depend(ctl.parent.parent.text)) f(depend(ctl.parent.parent.font)) subst(B(at(underlineoff)) F(at(underlineoff)) ) extprm(1)

[BtnGlassMedium]
@ = ext(1) [BtnGlass24] subst(MinSize(sz($Button_Medium_CX,$Button_CY)))

[BtnBottomMedim]
@    = t(bmpbutton) at(noowncontent) sz(a,20) ta(cc) f("MainFtr")
L    = bg("BtnBottomLeft,0,1,2,0,0,2") sz(20,p) a(lt) extprm(1)
R    = bg("BtnBottomRight,0,1,2,0,0,2") sz(20,p) a(rt) extprm(1)
M    = bg("BtnBottomMiddle,0,1,2,0,0,2") sz(p,p) xy(20,,20) extprm(1)
Cont = [BtnBottom_Cont] mg(7,,7) extprm(1)

[BtnBottom_Cont]
@ = a(lt) sz(a,p) ext(1)
Icon = a(lc) sz(a,a) extprm(1)
Text = a(ac) sz(a,a) xy(,1) text(ctl.parent.parent.text) f(ctl.parent.parent.font) extprm(1)

[IconLink]
@    = sz(a,a) at(btnlike,noowncontent) ext(1)
Icon = a(lc) extprm(1)
Text = [LabelShadow2] a(ac) bp(ctl.text = ctl.parent.text; ctl.font = ctl.parent.font; ctl.focused = ctl.parent.focused; ctl.hotlight = ctl.parent.hotlight) extprm(1)

[IconLink2]
@    = sz(a,a) at(btnlike,noowncontent) ext(1)
Icon = a(lc) extprm(1)
Text = a(ac) bp(ctl.text = ctl.parent.text; ctl.font = ctl.parent.font; ctl.focused = ctl.parent.focused; ctl.hotlight = ctl.parent.hotlight) extprm(1)

[InfoLink]
@    = sz(a,a) ext(1)
Text = a(lt) extprm(1)
Icon = i("info,0,1,0,0,0,1") at(btnlike) sz(a,a) a(as) extprm(1)

[BtnSquare]
$BpStates   = bp(ctl.hotlight = ctl.parent.hotlight; ctl.selected = ctl.parent.selected; ctl.focused = ctl.parent.focused)
@           = sz(83,83) at(btnlike) ext(1)
L           = bg("BtnSquareLeft,0,0,1,0,0,1") sz(3,p) a(lt) $BpStates
R           = bg("BtnSquareRight,0,0,1,0,0,1") sz(3,p) a(rt) $BpStates
M           = bg("BtnSquareMiddle,0,0,1,0,0,1") sz(p,p) xy(3,,3) $BpStates
Icon        = a(ct) xy(,8) $BpStates extprm(1)
Body        = [BtnSquare_Body] a(ca)

[BtnSquare_Body]
@       = a(ca) sz(p,p) mg(7,4)
Name    = a(cc) f(ctl.enabled ? "BtnSquare" : "BtnSquareGray") extprm(1)

[BtnSquarePlay]
@ = [BtnSquare] subst(Icon(i("Play,0,0,1,0,0,1") xy(-2,8)))

[BtnSquareStop]
@ = [BtnSquare] subst(Icon(i("Stop,0,0,1,0,0,1") xy(0,8)))

[WarinngBlock]
@    = sz(p,a) at(noowncontent) ext(1)
Ico  = i("warning")
Text = xy(10) a(as) text(ctl.parent.text)

;------------- Browse Dialogs ------------

[BrowseForObject]
@    = [StyledWindowT_Small] at(dragable,resizable,a_ok,a_cancel) subst( BodyEx( [BrowseForObject_Body] ) ) sz(300,300) ext(1) h(5207) btns(Ok(enable(isValidObj())))

[BrowseForObject_Body]
@           = sz(p,p)
Recursive   = $Check a(lb) xy(0,,,$Group_Shift) v(Recursive) extprm(1)
PathLabel   = a(lp) sz(a,20) xy(0,,,$Group_Shift) extprm(1)
EditGrp     = [BrowseForObject_Body_EditGrp]
ShellTree   = t(tree) alias(shelltree) a(lp) sz(p,p) xy(0,$Group_Shift) extprm(1)

[BrowseForObject_Body_EditGrp]
@           = a(as) sz(p,a) rs(100,0)
Add         = $Button a(rt) xy(,-2,5) text($Add) extprm(1) enable(isValidObj())
PathEdit    = t(edit) at(autocomplete) a(pt) sz(p) extprm(1)

[BrowseForFolder]
@ = [BrowseForObject] at(resizable) subst(PathLabel() Add(use(0)) Recursive(use(0))) ext(1)

[BrowseForFile]
@ = [StyledWindowT_Small]  at(resizable,dragable,a_ok,a_cancel) sz(280,250) subst( BodyEx( [BrowseForFile_Body] ))  ext(1) h(5049) btns(Ok(enable(isValidObj())))

[BrowseForFile_Body]
@           = sz(p,p)
PathLabel   = sz(a,20) a(lb) xy(,5)
PathEdit    = t(edit) a(ab) sz(p) xy(5) at(autocomplete)
ShellTree   = t(tree) alias(shelltree) sz(p,p) xy(,5) a(lp)

[BrowseForScanObject]
@ = [StyledWindowT_Small]  at(dragable,minimizable,resizable,a_ok,a_cancel) sz(320,320) subst( BodyEx( [BrowseForScanObject_Body] )) ext(1) h($IsKAT ? 15752 : 4814) btns(Ok(enable(isValidObj())))

[BrowseForScanObject_Body]
@           = sz(p,p)
Recursive   = $Check a(lb) xy(0,,,$Group_Shift) v(Recursive)
PathLabel   = sz(a,20) a(lp) xy(0,,,$Group_Shift)
EditGrp     = [BrowseForScanObject_Edit]
ShellTree   = t(tree) alias(shelltree) a(lp) sz(p,p) xy(0,$Group_Shift)

[BrowseForScanObject_Edit]
@           = a(as) xy(3,-1) sz(p,a) rs(100,0)
Add         = $Button a(rt) xy(,-2,5) text($Add) enable(isValidObj())
PathEdit    = t(edit) at(autocomplete) a(pt) sz(p)

[BrowseForUpdateSource]
@  = [StyledWindowT_Small] at(dragable,resizable,a_ok,a_cancel) subst( BodyEx( [BrowseForUpdateSource_Body] ) ) sz(350,280) ext(1) h(15890) btns(Ok(enable(isValidObj())))

[BrowseForUpdateSource_Body]
@           = sz(p,p) a(lt)
PathLabel   = sz(a,20) a(lb) xy(0,,,$Group_Shift)
PathEdit    = t(edit) a(ab) sz(p,20) xy(3,-5) rs(100,0) at(autocomplete)
ShellTree   = t(tree) alias(shelltree) a(lp) sz(p,p) xy(0,$Group_Shift)

[BrowseForRegistry]
@       = [StyledWindowT_Small] at(dragable,a_ok,a_cancel,resizable) sz(350,280) subst( BodyEx( [BrowseForRegistry_Body] ))  ext(1) h(5047) btns(Ok(enable(isValidObj())))

[BrowseForRegistry_Body]
@           = sz(p,p)
ValueLabel  = sz(80,20) a(lb) xy(0,,,$Group_Shift)
ValueEdit   = t(edit) a(ab) sz(p,20) xy(3,-5) rs(100,0) v(KeyValue)
PathLabel   = sz(80,20) a(lp) xy(0,,,$Group_Shift)
PathEdit    = t(edit) a(as) sz(p,20) xy(3,-5) rs(100,0) v(KeyPath)
ShellTree   = t(tree) alias(regtree) a(lp) sz(p,p) xy(0,$Group_Shift)

[BrowseForAppMenu]
@       = t(menu)
AppList
Browse  = text($Browse)

;---------------------- SecuredDesktop ---------------------
[SecuredDesktopDialog]
@ = t(secureddialog) sz(460,a) at(ontop,dragable,nomirror,customfooter,nohelp,modalframe) i("crit")
MessageArea = [SecuredDesktopDialog_MessageArea]
TableArea = [SecuredDesktopDialog_BodyArea]
Line = sz(p,1) a(la) bg("WizardLine"))
BottomArea = [SecuredDesktopDialog_BottomArea]

[SecuredDesktopDialog_MessageArea]
@ = bg("SecuredDesktop_MessageBg") mg(7,6) a(lt) sz(p,a)
Icon = a(lc) xy(5, 0) i("LowCrit") sz(a,a)
Message = a(ac)  xy(12, 0) sz(a,a) text(s_SecuredDesktopDialog_Messages(MessageId)) f("SecureDesktopMessage")

[SecuredDesktopDialog_BodyArea]
@ = bg("ColorWite") mg(7,21) a(la) sz(p,a)
Icon = i("Main.big") xy(40, 0)
Table = [SecuredDesktopDialog_TableArea]

[SecuredDesktopDialog_TableArea]
@ = a(at) sz(a,a) xy(20,0)
ProgramNameLabel = a(lt) sz(120,a) f("SecureDesktopTable")
ProgramNameValue = a(ls) xy(125,0) sz(a,a) text($ProductNameLong) f("SecureDesktopTable")
PublisherLabel = a(la) sz(120,a) f("SecureDesktopTable")
PublisherValue = a(ls)  xy(125,0) sz(a,a) f("SecureDesktopTable_Bold")
ActionLabel = a(la) sz(120,a) f("SecureDesktopTable")
ActionValue = a(ls)  xy(125,0) sz(a,a) text(s_SecuredDesktopDialog_Actions(ActionId)) f("SecureDesktopTable")

[SecuredDesktopDialog_BottomArea]
@ = bg("ColorLGrey") mg(9,8) a(la) sz(p,a) at(enum)
CheckBox  = t(check) a(lc) xy(a,a) sz(a,a) v(TrustMe)
buttons= [SecuredDesktopDialog_Buttons]

[SecuredDesktopDialog_Buttons]
@ = a(rt) sz(a,a)
Yes = t(button) sz($Button_CX, 25) a(lt) text($Yes)
No = t(button) sz($Button_CX, 25) a(at) text($No) xy(7) at(default)

;------------- Message Dialog ------------

[MessageDialog]
@ = [StyledWindowT_Small] sz(a,a) at(minimizable,nohelp,customfooter) subst( BodyEx([MessageDialog_Body]) Caption(subst(Text(text(msg.Caption)))) ) bg($IsInitMode ? "ColorWindowClassic" : ((isOsGuiThemed && !isTabbed) ? "ColorWindow" : "ColorWindowClassic")))
MinSize = $MessageDialogMinSize

[MessageDialog_Body]
@       = sz(a,a) mg(14,14)
Icon    = sz(32,32) xy(,,17) i(s_MsgBoxIcon(msg.Icon))
Text    = t(richedit) at(readonly,noborder,nofocus) a(ac) sz(a,a,200,,500) order(4) text(msg.Text)

;------------- Grid Groups --------

[Grid.Group.Bold]
@       = f("GridGroup") sz(p,30) rs(100,0)
border  = a(lb) sz(p,2) bg("GridGroup")

[Grid.Group.Template]
@       = f(isExpanded ? "GridGroup" : "Normal") sz(p,30) rs(100,0)
border  = a(lb) sz(p,2) bg("GridGroup")

[Grid.Group.Normal]
@ = sz(p,0) rs(100,0)

[Grid.Footer.Template]
@       = f("GridGroup") sz(p,22) rs(100,0) ext(1)
Add     = t(hotlink) sz(a,a) a(lt) xy(5,4) i("listctrls,0") f("Hotlink_Normal") extprm(1)
border  = a(lt) sz(p,2) bg("GridGroup")

[Grid.Footer2.Template]
@           = f("GridGroup") sz(p,22) rs(100,0) ext(1)
Add         = t(hotlink) sz(a,a) a(lc) xy(5) i("listctrls,0") f("Hotlink_Normal") extprm(1) enable(depend(canAdd()))
Edit        = t(hotlink) sz(a,a) a(as) xy(7) i("listctrls,1") f("Hotlink_Normal") extprm(1) enable(depend(canEdit()))
Delete      = t(hotlink) sz(a,a) a(as) xy(7) i("listctrls,2") f("Hotlink_Normal") extprm(1) enable(depend(canDelete()))
MoveUp      = t(hotlink) sz(a,a) a(as) xy(7) i("listctrls,3") f("Hotlink_Normal") extprm(1) enable(depend(canMoveUp())) use(0)
MoveDown    = t(hotlink) sz(a,a) a(as) xy(7) i("listctrls,4") f("Hotlink_Normal") extprm(1) enable(depend(canMoveDown())) use(0)
Import      = t(hotlink) sz(a,a) a(as) xy(7) i("listctrls,4") f("Hotlink_Normal") extprm(1) use(0)
Export      = t(hotlink) sz(a,a) a(as) xy(7) i("listctrls,3") f("Hotlink_Normal") extprm(1) use(0)
Other       = a(ac) xy(7) extprm(1) use(0)
border      = a(lt) sz(p,2) bg("GridGroup")

[TB_Hotlink]
@    = at(btnlike,noowncontent) sz(a,a) a(ac) xy($TB_ShiftNext) ext(1)
Icon = a(lc) sz(a,a) i(ctl.parent.icon) extprm(1)
Cont = a(ac) sz(a,a) f("Description") text(ctl.parent.text) extprm(1)

[TB_Button]
@    = at(btnlike,noowncontent) sz(a,23) a(ac) xy($TB_ShiftNext_Btn) ext(1)
Left = a(lt) sz(6,p) bg(ctl.parent.selected? "TBButtonLeft,1" : (ctl.parent.hotlight? "TBButtonLeft,0":"") )
Right= a(rt) sz(6,p) bg(ctl.parent.selected? "TBButtonRight,1" : (ctl.parent.hotlight? "TBButtonRight,0":"") )
Mid  = a(lt) sz(p,p) bg(ctl.parent.selected? "TBButtonMiddle,1" : (ctl.parent.hotlight? "TBButtonMiddle,0":"") ) xy(6,,6)
Icon = a(lc) sz(a,a) xy(6) extprm(1)
Cont = a(ac) sz(a,a) xy(3,,6) ta(lc) f("Description") text(ctl.parent.text) extprm(1)

[TB_Button_Menu]
@    = at(btnlike,noowncontent) sz(a,23) a(ac) xy($TB_ShiftNext_Btn) ext(1)
Left = a(lt) sz(6,p) bg(ctl.parent.selected? "TBButtonLeft,1" : (ctl.parent.hotlight? "TBButtonLeft,0":"") )
Right= a(rt) sz(6,p) bg(ctl.parent.selected? "TBButtonRight,1" : (ctl.parent.hotlight? "TBButtonRight,0":"") )
Mid  = a(lt) sz(p,p) bg(ctl.parent.selected? "TBButtonMiddle,1" : (ctl.parent.hotlight? "TBButtonMiddle,0":"") ) xy(6,,6)
AreaLeft = xy(6) a(lc) extprm(1)
Cont = a(ac) sz(a,a) xy(2) ta(lc) f("Description") text(ctl.parent.text) extprm(1)
Icon = a(ac) sz(a,a) xy(3,,3) i("ToolbarMenuIcon") extprm(1)

[TB_Button_ChkLike]
@    = at(chklike, rememberdata) a(ac) sz(20,20) rs(0,0) bg(ctl.selected ? "ToolBarItemPressed" : (ctl.hotlight ? "ToolBarItemHilight" : "")) xy($TB_ShiftNext_Btn) ext(1)
Icon = a(cc) ia(cc) sz(a,a) extprm(1)
Cont = a(ac) sz(a,a) f("Description") text(ctl.parent.text) use(0) extprm(1)

[Grid.Toolbar.Template]
@           = a(la) bg("ToolBarItem") b(SettingsVertSep) f("GridGroup") sz(p,28) rs(100,0) ext(1)
Add         = [TB_Button] subst(Icon(i("listctrls,0"))) xy($TB_ShiftFirst_Btn) extprm(1) enable(depend(ctl.parent.List.canAdd()))      onclick(ctl.parent.List.add()) 
Allow       = [TB_Button] subst(Icon(i("listctrls,7"))) extprm(1) enable(depend(ctl.parent.List.canEdit()))   use(0)
Deny        = [TB_Button] subst(Icon(i("listctrls,8"))) extprm(1) enable(depend(ctl.parent.List.canEdit()))   use(0)
AllowDeny   = [TB_Button] extprm(1) enable(depend(ctl.parent.List.canEdit()))   use(0)
Ask         = [TB_Button] subst(Icon(i("listctrls,12"))) extprm(1) enable(depend(ctl.parent.List.canEdit()))   use(0)
Edit        = [TB_Button] subst(Icon(i("listctrls,1"))) extprm(1) enable(depend(ctl.parent.List.canEdit()))     onclick(ctl.parent.List.edit())
Delete      = [TB_Button] subst(Icon(i("listctrls,2"))) extprm(1) enable(depend(ctl.parent.List.canDelete()))   onclick(ctl.parent.List.delete())
MoveUp      = [TB_Button] subst(Icon(i("listctrls,3"))) extprm(1) enable(depend(ctl.parent.List.canMoveUp()))   onclick(ctl.parent.List.moveUp()) use(0)
MoveDown    = [TB_Button] subst(Icon(i("listctrls,4"))) extprm(1) enable(depend(ctl.parent.List.canMoveDown())) onclick(ctl.parent.List.moveDown()) use(0)
Import      = [TB_Button] subst(Icon(i("listctrls,4"))) extprm(1) use(0)
Export      = [TB_Button] subst(Icon(i("listctrls,3"))) extprm(1) use(0)
Other       = a(ac) xy(7) extprm(1) use(0)
Sep         = a(lb) sz(p,1) b(SettingsVertSep)

[Grid.Editor.Template]
@           = f("GridGroup") sz(p,30) rs(100,0) ext(1)
Delete      = at(clickable) sz(a,a) a(rc) i("listctrls,2") extprm(1)
Edit        = at(clickable) sz(a,a) a(pc) i("listctrls,1") extprm(1)
MoveDown    = at(clickable) sz(a,a) a(pc) i("listctrls,4") use(0) extprm(1)
MoveUp      = at(clickable) sz(a,a) a(pc) i("listctrls,3") use(0) extprm(1)

[Grid.Groups]
footer              = [Grid.Footer.Template]
rowedit             = [Grid.Editor.Template]
date                = [Grid.Group.Bold]
dateonly            = [Grid.Group.Bold] expand(1) sort(-val,sortdown)
task                = [Grid.Group.Template] text(s_TaskID(val) + $items)
taskname            = [Grid.Group.Template] text(format_struct(profile(val), "ProfileReport")) expand(profile(val).state & #StateFlagOperational)
runtask             = [Grid.Group.Template] text(format_struct(profile(val), "ProfileReport")+ $items) expand(profile(val).state & #StateFlagOperational)
scantask            = [Grid.Group.Template] text(format_struct(profile(val), "ProfileReport") + f_scanEventsGroup(profile(val))) expand(profile(val).state & #StateFlagOperational)
dettype             = [Grid.Group.Bold] expand(1)
threatstatus        = [Grid.Group.Bold] expand(1)
PIDGroup            = [Grid.Group.Template] i(s_PIDIcon(val))
AppGroup            = [Grid.Group.Template] i(s_AppIcon(val)) text($AppGroup + $items) sort($AppGroup,sortdown)
AppItem             = [Grid.Group.Normal]   i(s_AppIcon(val)) text($AppGroup) sort($AppGroup)
CounterItem         = [Grid.Group.Normal] text(s_RepDetectType(val)) sort(s_RepDetectType(val))
CounterGroup        = [Grid.Group.Template] text(s_CounterGroup(val)) expand(1)
BasesCounterItem    = [Grid.Group.Normal]   text(s_BasesCounterType(val)) sort(s_BasesCounterType(val))
ObjectSite          = [Grid.Group.Template] text(val)
AppProgramm         = [Grid.Group.Template] text( s_filterEmptyText(val) )
AppAсtivity         = [Grid.Group.Template] expand(1) text( val == "" ? $GroupUnk : val )
default             = [Grid.Group.Template]


[Grid.Find]
@  = [StyledWindowT_Small] at(dragable) subst( BodyEx( [Grid.Find_Body] ) ) sz(370,a) h(25852)

[Grid.Find_Body]
Btn     = [Grid.FindBody.Btns]
Dlg     = [Grid.FindBody] a(pt) xy($Button_Shift)


[Grid.FindBody.Btns]
@       = a(rt) sz(a,a)
Find    = $Button a(lt) at(default)         sz($Button_Medium_CX,$Button_CY)
Mark    = $Button a(la) xy(0,5) sz($Button_Medium_CX,$Button_CY)

[Grid.FindBody]
@           = sz(p,a)
FindLbl     = a(la) xy(,5,5)
FindEdit    = a(ls) sz(p) t(edit) xy(55,$Edit_CenterOffsetY) v(Mask)
ColumnLbl   = a(la) xy(,11,5)
ColumnCmb   = [Grid.ColumnCmb]
MatchCase   = $Check a(la) xy(,10) v(MatchCase)
WholeWord   = $Check a(la) xy(,6) v(WholeWord)

[Grid.Export]
@  = [StyledWindowT_Small] at(dragable) subst( BodyEx( t(progress) a(lt) sz(p,22) v(Progress) ) ) sz(250,a) h(16452)

[Grid.ColumnCmb]
@   = a(ls) sz(p) t(combo) xy(55,$Edit_CenterOffsetY) v(Column) alias(columns)
All = at(default)

[Grid.Filter]
@  = [StyledWindowT_Small] at(dragable) subst( BodyEx( [Grid.Filter_Body] ) ) sz(a,a) v(opType) h(25854)

[Grid.Filter_Body]
Label       = sz(a,a)
Cond1       = [Grid.Filter.Condition] a(la) xy(,10,20) v(cond1)
ValMask1    = t(edit) a(as) sz(245,a) v(mask1) enable(ctl.Cond1.value != "None" && ctl.Cond1.value != "Blanks" && ctl.Cond1.value != "NonBlanks") visible(colType == 1)
ValEnum1    = t(combo) dl(10) alias(enum) a(as) v(enum1) sz(a) enable(ctl.Cond1.value != "None" && ctl.Cond1.value != "Blanks" && ctl.Cond1.value != "NonBlanks") visible(colType == 2)
ValDate1    = t(timeedit) at(date) a(as) v(date1) sz(245,a) enable(ctl.Cond1.value != "None" && ctl.Cond1.value != "Blanks" && ctl.Cond1.value != "NonBlanks") visible(colType == 3)
And         = t(radio) sz(a,a) a(la) xy(20,10) v(1)
Or          = t(radio) sz(a,a) a(as) xy(20) v(2)
Cond2       = [Grid.Filter.Condition] a(la) xy(,10,20) v(cond2)
ValMask2    = t(edit) a(as) sz(245,a) v(mask2) enable(ctl.Cond2.value != "None" && ctl.Cond2.value != "Blanks" && ctl.Cond2.value != "NonBlanks") visible(colType == 1)
ValEnum2    = t(combo) dl(10) alias(enum) a(as) v(enum2) sz(a) enable(ctl.Cond2.value != "None" && ctl.Cond2.value != "Blanks" && ctl.Cond2.value != "NonBlanks") visible(colType == 2)
ValDate2    = t(timeedit) at(date) a(as) v(date2) sz(245,a) enable(ctl.Cond2.value != "None" && ctl.Cond2.value != "Blanks" && ctl.Cond2.value != "NonBlanks") visible(colType == 3)

[Grid.Filter.Condition]
@                   = t(combo) sz(110) ext(1)
None                = at(default)
Equals              = use(colType!=3)
DoNotEqual          = use(colType!=3)
GreaterThan         = use(colType==3)
GreaterThanOrEqual  = use(0)
LessThan            = use(colType==3)
LessThanOeEqual     = use(0)
Blanks              = use(colType!=3 && colType!=2)
NonBlanks           = use(colType!=3 && colType!=2)
Like                = use(0)
NotLike             = use(0)

[Grid.HdrPopup]
@           = t(menu) bg("MenuIconBg")
SortDown    = i("GridMenu,1")
SortUp      = i("GridMenu,0")
Separator
Find        = i("GridMenu,4")
Group       = i("GridMenu,2")
Filter      = i("GridMenu,3")
Separator

[Grid.FltPopup]
@           = t(menu) bg("MenuIconBg")
Custom
All
Separator

;------------- Templates ------------

[ValuePointed]
@       = sz(p,a) ext(1)
Name    = sz(a,a) a(lt) extprm(1)
ValArea = [ValuePointed_ValArea]

[ValuePointed_ValArea]
@       = sz(p,a) a(at) xy($Control_Shift)
Val     = sz(a,a) a(rt) extprm(1)
Dots    = a(pb) bg("Points") sz(p,1) xy(,2) extprm(1)

[Value]
@       = sz(p,a) ext(1)
Name    = sz(a,a) extprm(1) a(lt)
Val     = sz(a,a) a(rt) extprm(1)

[LValue]
@ = ext(1) [Value] a(la) subst(Name(a(lc)) Val(a(lt) xy(100) sz(p,a)))

[Value2]
@       = sz(p,a) ext(1)
Val     = sz(a,a) xy() a(rt) extprm(1)
NameArea = [Value2_NameArea] a(pt) sz(p,a) xy(7)

[Value2_NameArea]
Name    = sz(a,a) extprm(1) a(lt)

[ValueA]
@ = ext(1) [Value] sz(a,a) subst(Val(a(at)) )

[ProfileHome_Chart]
@           = sz(p,p) ext(1)
Zoom        = [ProfileHome_Chart_Zoom]
Chart       = sz(p,p) a(lp) mg(0,3,0,5) extprm(1)
Legend      = a(rt) xy(,4) sz(a,a) extprm(1)
Name        = extprm(1) xy(40,7) f("PlotAreaFont")
;PeriodDesc  = extprm(1) a(rt) xy(14,7) f("PlotAreaFont") text($ChartPeriod+ctl.Chart.Period()/60 + " " + s_minutes(f_numdeclension(ctl.Chart.Period()/60)) )


[ProfileHome_Chart_Zoom]
@               = a(rb) sz(a,11) extprm(1)
button_minus    = t(bmpbutton) sz(11,11) a(lt) bg("grafplusminus,1,1,1,1,1,1") onclick(ctl.Chart.zoom("-", "60,180,300,600"))
sep             = bg("grafsep") a(at) xy(1,4,1)
button_plus     = t(bmpbutton) sz(11,11) a(at) bg("grafplusminus,0,0,0,0,0,0") onclick(ctl.Chart.zoom("+", "60,180,300,600"))

[ProfileHome_ChartStat]
@ = ext(1) [ProfileHome_Chart] subst( Zoom(use(0)) Name(xy() a(ct) f("GridGroup")) Chart(xy(,,,14)) )

[ChartLegend]
@       = sz(a,a) a(at) xy(,,7) ext(1)
Color   = a(lt) xy(,3) sz(8,8) extprm(1)
Text    = a(at) xy(7) extprm(1)

[TaskIcon]
@       = a(ca) sz(p,a) xy(,5)
Icon    = sz(90,92) ia(ct) at(btnlike) extprm(1)
Desc    = a(ls) xy(110) sz(p,78) at(dynshow) extprm(1) use(0)

[TaskVal]
@ = ext(1) [ValuePointed] subst(Dots(use(0)))

[RunAsGroup]
@       = $SettingsGroup xy(0,) ext(1)
Enable  = t(check) sz(a,a) v(runas.enable)
Account = [LValue] xy(20,7) enable(runas.enable) subst(Name() Val(t(edit) v(runas.account) onok(if(runas.enable && !ctl.value, balloon("NoRunAsAccount")))))
Pswd    = [LValue] xy(20,7) enable(runas.enable) subst(Name() Val(t(edit) at(password) oninit(if(runas.password=="",runas.password=crypt(""))) v(bicrypt(runas.password))))

;------------- Tray Window ------------

[Tray]
@ = t(tray) alias(producttray) prm(s_ProductTrayId(env("ProductType"))) onclick(f_showMainWindow("QMLMainWindow" + if($IsUpdateActive, ":Updater", if($IsScanActive, ":Scan")))) ext(1)

[Tray.menu]
@                 = t(menu)
LaunchQMLTaskManager  = onclick(window("QMLTaskManager")) enable(EulaVerified)
sep
Scan_My_Computer  = alias(taskview) onclick($OpenScanProgressWindow) visible(f_IsStateActive(state))
Scan_Startup      = alias(taskview) onclick($OpenScanProgressWindow) visible(f_IsStateActive(state))
Scan_Qscan        = alias(taskview) onclick($OpenScanProgressWindow) visible(f_IsStateActive(state))
Updater           = alias(taskview) onclick(f_StartUpdater())
sep
Tools             = [Tray.menu_Tools] use(!$IsKAV) enable(EulaVerified)
sep               = visible($IsKAV && (ctl.Tools.visible || ctl.Updater.visible || ctl.Scan_Startup.visible || ctl.Scan_My_Computer.visible || ctl.Scan_Qscan.visible))
VirtualKeyboard   = onclick(showVirtualKeyboard()) use($IsKAV && f_isInstalled("VirtualKeyboard") && f_isVkbdInstalled()) enable(EulaVerified && RebootsSinceInstall)
sep
kis               = onclick(f_showMainWindow("QMLMainWindow")) at(default)
DisableProtect    = alias(taskview) onclick(s_IsStateRunning(Protection.state) ? f_setState(#TASK_REQUEST_PAUSE, "Protection") : setstate(#TASK_REQUEST_RUN, "Protection")) use(!$IsProtectionNotInstalled) enable(!s_IsStateTransitional(Protection.state) && !$IsSafeMode && EulaVerified)
EnableParCtl      = alias(taskview) ns(ParCtl) onclick(var pUserSett; pUserSett = users.find("UserId == " + toExpr(CurrentUserSID)).settings; pUserSett.Enabled = !pUserSett.Enabled; name.ser().setProfileSettingsDirty()) use(f_isInstalled("ParCtl") && $IsKIS) enable(EulaVerified)
Settings          = alias(taskview) onclick(window("QMLSettings")) enable(EulaVerified)
About             = onclick(window("QMLAbout"))
sep
RestartOS         = onclick(f_RestartOs()) use($IsNeedReboot)
Unload            = onclick(exit()) enable($IsAdvancedDisinfectionStoped)

[Tray.menu_Tools]
HipsTask          = alias(taskview) enable(f_isInstalled(ctl.id)) text($Hips) onclick(window("SystemMonitor:Programs:Running"))
;sep
NetMonitor        = alias(taskview) onclick(window("NetworkMonitor")) use(f_isInstalled("Firewall")) enable(f_IsStateActive(Firewall.state))
;sep
VirtualKeyboard   = alias(taskview) onclick(showVirtualKeyboard()) use($PersonalOnly && f_isVkbdInstalled()) enable(RebootsSinceInstall)




[Tray.menu_Item]
@           = $MenuCustomItem sz(280,a) ext(1)
Icon        = a(lt) extprm(1) sz(45,p) ia(ct) xy(,11)
SepVert     = sz(1,p) xy(45,) a(lt) b(SettingsVertSep) rs(0,0)
Data        = [Tray.menu_Item.Data] mg(12,11) a(at) extprm(1)
Arrow       = a(ac) i("MenuSubArrow") use(0) extprm(1)

[Tray.menu_Item.Data]
@           = sz(208,a)
Caption     = a(at) sz(a,a) f("Header0") extprm(1)
Description = a(sa) sz(a,a) xy(,7) f("Description") extprm(1)

[Tray.menu_Item.Sep]
@ = [Tray.menu_Item] subst( Data( sz(p,1) xy(4,,4,) a(at) b(MainTaskSep) rs(0,0)) Icon( use(0) ) )

[TrayNews]
@ = t(tray) alias(newstray) text($NewsFromKL) onclick(UnreadNewsCount == 1 ? window("QMLMainWindow:NewsItem") : window("QMLMainWindow:NewsList"))

;------------- StyledWindowT ------------

[Templates]
$dlg_pic_lt_x = 100
$dlg_pic_lt_y = 100
$dlg_pic_rt_x = 100
$dlg_pic_rt_y = 100

$dlg_pic_lb_x = 100
$dlg_pic_lb_y = 100
$dlg_pic_rb_x = 100
$dlg_pic_rb_y = 100

$dlg_body_xy    = xy($Border_Shift,$DialogPanelSizeY_top,$Border_Shift,$DialogPanelSizeY_bottom)
$dlg_bodyTab_xy = xy($Border_Shift,$DialogPanelSizeYTab_top,$Border_Shift,$DialogPanelSizeY_bottom)

; ------------------- Design of Template Style Window -------------------

[DesignWindowT]
@ = sz(p,p) ext(1)
CaptionBg      = [DesignWindowT_CaptionBg]
middle         = [DesignWindowT_Middle]
FooterBg       = [DesignWindowT_FooterBg]
;BorderOutSide  = [DesignWindowT_BorderOutSide] visible(!ctl.parent.parent.IsStyle("is_maximaze"))
BorderInSide   = [DesignWindowT_BorderInSide]
;Body           = [DesignWindowT_Body]

[DesignWindowT_Body]
@        = a(lt) bg("ColorWindowClassic") $dlg_body_xy  sz(p,p) extprm(1)

[DesignWindowT_CaptionBg]
$isMaximize = ctl.parent.parent.parent.IsStyle("is_maximaze")
@        = sz(p,a) ext(1)
L        = extprm(1) a(lt) bg($isMaximize ? "dlg_topleft_flat_bg":"dlg_topleft_bg") 
M        = extprm(1) a(lt) bg("dlg_topfiller_bg") sz(p,) xy($dlg_pic_lt_x,,$dlg_pic_rt_x,)
R        = extprm(1) a(rt) bg($isMaximize? "dlg_topright_flat_bg":"dlg_topright_bg")

[DesignWindowT_Middle]
@        = sz(p,p) ext(1)
L        = extprm(1) a(lt) xy(,$dlg_pic_lt_y,,$dlg_pic_lb_y) sz(a,p) bg("dlg_leftfiller_bg")
R        = extprm(1) a(rt) xy(,$dlg_pic_rt_y,,$dlg_pic_rb_y) sz(a,p) bg("dlg_rightfiller_bg")

[DesignWindowT_FooterBg]
$isMaximize = ctl.parent.parent.parent.IsStyle("is_maximaze")
@        = sz(p,a) a(lb) ext(1)
L        = extprm(1) a(lb) bg($isMaximize ? "dlg_bottomleft_flat_bg":"dlg_bottomleft_bg")
M        = extprm(1) a(lb) xy($dlg_pic_lb_x,,$dlg_pic_rb_x,) sz(p,) bg("dlg_bottomfiller_bg")
R        = extprm(1) a(rb) bg($isMaximize ? "dlg_bottomright_flat_bg":"dlg_bottomright_bg")

[DesignWindowT_BorderOutSide]
@        = sz(p,p)
t_l      = a(lt) bg("dlg_b_topleft") sz(6,6) rs(0,0)
t_m      = a(lt) bg("dlg_b_topfiller") sz(p,3) xy(6,,6,)
t_r      = a(rt) bg("dlg_b_topright") sz(6,6) rs(0,0)
m_l      = a(lt) bg("dlg_b_middleleft") xy(,6,,6) sz(3,p) 
m_r      = a(rt) bg("dlg_b_middleright") xy(,6,,6) sz(3,p) 
b_l      = a(lb) bg("dlg_b_bottomleft") sz(6,6) rs(0,0)
b_m      = a(lb) bg("dlg_b_bottomfiller") xy(6,,6,) sz(p,3)
b_r      = a(rb) bg("dlg_b_bottomright") sz(6,6) rs(0,0)

[DesignWindowT_BorderInSide]
$CornerSize = 5
@         = sz(p,p) xy($BodyBorder_Shift,$BodyBorder_Top,$BodyBorder_Shift,$BodyBorder_Bottom)
rect_layer           = b(dlg_border_layer)  sz(p,p) xy2($BodyBorder_Shift,$BodyBorder_Top,$BodyBorder_Shift,$BodyBorder_Bottom)
rect_layer_shadow    = b(dlg_border_layer_shadow)  xy(-1,-1,-1,-1) sz(p,p) xy2($BodyBorder_Shift,$BodyBorder_Top,$BodyBorder_Shift,$BodyBorder_Bottom)
;TL        = extprm(1) a(lt) bg("dlg_content_top_left_corner")
;TM        = extprm(1) a(lt) bg("dlg_content_top_filler")          xy($CornerSize,,$CornerSize,) sz(p,) 
;TR        = extprm(1) a(rt) bg("dlg_content_top_right_corner")
;ML        = extprm(1) a(lt) bg("dlg_content_left_filler")         xy(,$CornerSize,,6) sz(a,p)
;MR        = extprm(1) a(rt) bg("dlg_content_right_filler")        xy(,$CornerSize,,6) sz(a,p)
;BL        = extprm(1) a(lb) bg("dlg_content_bottom_left_corner")  xy(0,-6)
;BM        = extprm(1) a(lb) bg("dlg_content_bottom_filler")       xy($CornerSize,,$CornerSize,) sz(p,)
;BR        = extprm(1) a(rb) bg("dlg_content_bottom_right_corner") xy(0,-6)

; ------------------- Elements of Template Style Window -------------------

[Templates]
$iconStates = "1,3,2,0,1,2"
$IsWindowMaximaze  = ctl.parent.parent.IsStyle("is_maximaze")
$UseMaximize = ctl.top.IsStyle("resizable")
$UseMinimize  = ctl.top.IsStyle("minimizable") || $UseMaximize
$WindowMinimizeBtn = at(clickable) a(pt) xy(,0) onclick(showMode(#showMinimized))                                              bg("window_minimize,"+$iconStates) enable(ctl.top.IsStyle("minimizable"))               use($UseMinimize)
$WindowMaximizeBtn = at(clickable) a(pt) xy(,0) onclick(!$IsWindowMaximaze ? showMode(#showMaximazed) : showMode(#showNormal)) bg(!$IsWindowMaximaze ? "window_maximize,"+$iconStates : "window_restore,"+$iconStates) use($UseMaximize)
$WindowCloseBtn    = at(clickable) a(rt) xy(9,0) onclick(close())                                               bg(($UseMinimize ? "window_close,":"window_close_singl,")+$iconStates)

[StyledWindowT_Caption]
@        = sz(p,$DialogPanelSizeY_top) rs(100,0) ext(1)
Icon     = a(lc) xy(7,) i(ctl.parent.parent.icon) at(clickable)
Text     = a(ac) xy(,-1,90) at(singleline) f("SecondWindowTitle") text(ctl.parent.parent.text) extprm(1)

; При добавление кнопки, также её добавить WinDlg.cpp -> CheckHitTest(...)
Close     = $WindowCloseBtn
Maximize  = $WindowMaximizeBtn 
Minimize  = $WindowMinimizeBtn


; ------------------- Template Style Window -------------------
; шаблон для большого окна
[StyledWindowT]
$roundR = 9
@              = $DlgAttrBase mg(0,0) sz(700,300) i("Main") at(customfooter) props(if(!$IsInitMode, "at(customfooter,noborder,nocaption) round($roundR,$roundR,$roundR,$roundR)")) ext(1)
design         = [DesignWindowT] use(!$IsInitMode) extprm(1)
Caption        = [StyledWindowT_Caption] use(!$IsInitMode) extprm(1)
Body           = [StyledWindowT_Body_NoCaption] use(!$IsInitMode) extprm(1)
Body           = [StyledWindowT_Body_Classic] use($IsInitMode) extprm(1)
Footer         = [DialogPanel] use(!$IsInitMode) extprm(1)
Footer         = [DialogPanelClassic] use($IsInitMode) extprm(1)

; без рамки окна
[StyledWindowT_Body_NoCaption]
@              = sz(s,s) $dlg_body_xy bg((isOsGuiThemed || true) ? "ColorWindow" : "ColorWindowClassic") extprm(1) 
BodyEx         = sz(s,s) extprm(1)

; стандартный вид
[StyledWindowT_Body_Classic]
@              = sz(s,s) xy(,,,$DialogPanelSizeY) extprm(1)
BodyEx         = sz(s,s) extprm(1)

; шаблон для маленького окна
[StyledWindowT_Small]
@              = [StyledWindowT] subst( Body(mg(12,12,12,12) ) design( [DesignWindowT] ) )

[StyledWindowT_Small_Simple]
@              = [StyledWindowT] subst( design( [DesignWindowT] ) ) sz(500,400)

; шаблон для окна содержащего TAB-control
[StyledWindowT_Tab]
$parDesign     = design( [DesignWindowT] )
$parBodyEx     = Body( $dlg_bodyTab_xy bg("") )
@              = [StyledWindowT] subst( $parDesign $parBodyEx )

; шаблон для окна содержащего small TAB-control
[StyledWindowT_Small_Tab]
$parDesign     = design( [DesignWindowT] )
$parBodyEx     = Body( $dlg_bodyTab_xy bg("") )
@              = [StyledWindowT] subst( $parDesign $parBodyEx )

; шаблон для окна без оформления
[StyledWindowT_Null]
@              = [StyledWindowT] subst( design( use(0) ) )

;------------- Wizards ------------

[WizardHeader]
@       = sz(p,p)
pic     = sz(a,a) a(lt) bg("InstallerHeader") rs(0,0) use($IsInitMode) ext(1)
pic     = sz(a,a) a(lt) bg("MainWindowHeader") rs(,0) use(!$IsInitMode) ext(1)
;_rs     = sz(p,p) a(rt) at(fixstyle) bg("WizardHeader_rs") xy(320) visible(!$IsInitMode)
Sep     = t(group) at(3dborder) xy(,,-1) sz(p,2) a(lb) use($IsInitMode) extprm(1)
Sep     = $StdFooterSeparator a(lb) use(!$IsInitMode) extprm(1)

[DialogPanelClassic]
@                   = a(lb) sz(p,$DialogFooterSizeY_Installer) ext(1) rs(100,0)
;NOTE: negative axis Y offset is necessary for correct separator displaying both with and without Copyright (compare look, for example, for [ConfigureWizard.InitBegin] and [ConfigureWizard.InitFinish])
;So you must keep above controls height not too large to prevent visual bugs
Copyright           = a(lt) [LabelShadow] at(noowncontent) subst(B(f("Normal_White") text(ctl.parent.text)) F(enable(0)) ) sz(a,a) xy(4,,1) use(0) extprm(1)
Separator           = t(group) a(at) xy(,10,-1) sz(p,2) at(3dborder) use(0) extprm(1)
BtnsGroup           = [WizardDialogPanel_BtnsGroup] a(rb) xy(6,12)
Help                = at(btnlike) a(lc) xy(9,) text($Help) f("MainFtr") onclick(help()) extprm(1) use($IsHelpExists) enable($IsAdvancedDisinfectionStoped)

[WizardDialogPanel_BtnsGroup]
@           = sz(a,$Button_CY) rs(0,0) extprm(1)
Confirm     = $Button_Installer a(lt) xy($Button_Shift_Installer)
WizardGroup = [WizardDialogPanel_BtnsGroup_WizardGroup]
No          = $Button_Installer a(at) xy($Button_Shift_Installer)
Cancel      = $Button_Installer a(at) xy($Button_Shift_Installer) onclick(close()) extprm(1)
Apply       = $Button_Installer a(at) xy($Button_Shift_Installer)

[WizardDialogPanel_BtnsGroup_WizardGroup]
@       = sz(a,p) a(at) rs(0,0)
Back    = $Button_Installer xy($Button_Shift_Installer) extprm(1)
Next    = $Button_Installer a(at) extprm(1)

[WizardTpl]
@ = [StyledWindowT] at(wizard,customfooter,minimizable) sz(a,a) subst(Footer(subst(Separator(use(1)) Help(use(!$IsInitMode)) Next(use(1)) )) BodyEx( props($IsInitMode ? "sz(493,324)" : "sz(548,383)") at(sheetpages) order(0) ))

[WizardPage]
@       = ext(1) sz(p,p)
Header  = [WizardPage_Header_Neo] use(!$IsInitMode)
Header  = [WizardPage_Header_Classic] use($IsInitMode)
Body    = a(la) sz(p,p) mg(30,10,30,7) extprm(1) use(!$IsInitMode)
Body    = a(la) sz(p,p) mg(33,23,33,7) extprm(1) use($IsInitMode)

[WizardPage_Header]
@       = sz(p,58) extprm(1)
hdr     = [WizardHeader] sz(p,p)
Body    = [WizardPage_Header_Body] sz(p,a) a(lc) xy(27)

[WizardPage_Header_Body]
Name    = sz(a,a) f("Header0White") extprm(1)
Descr   = sz(a,a) a(sa) xy(,7,) f("Header0WhiteLite") visible(ctl.text) extprm(1)

[WizardPage_Header_Neo]
@           	= sz(p,a) extprm(1)
MinHeght		= sz(a,89) a(lt)
HeaderTitle     = [WizardPage_Header_Body_Neo]

[WizardPage_Header_Body_Neo]
@               = sz(p,a) mg(30,30,30,0)
Name            = sz(a,a) a(lt) f("Wizard_Caption") extprm(1)
Line            = sz(p,1) a(la) xy(,20,,14) bg("WizardLine")

[WizardPage_Header_Classic]
@       = sz(p,60) extprm(1)
hdr     = [WizardHeader] sz(p,p)
Body    = [WizardPage_Header_Body_Classic] sz(p,a) a(lt) xy(20,9)


[WizardPage_Header_Body_Classic]
Name    = sz(a,a) f("Normal_Bold_Black") extprm(1)
Descr   = sz(a,a) a(sa) xy(13,7,) f("Normal_Black") visible(ctl.text) extprm(1)


[WizardPage_InfoArea]
@       = a(la) sz(p,a) bg("AlertInfo") ext(1)
Top     = a(la) sz(p,0) bg("AlertInfoTop")
Info    = a(la) sz(p,a) mg(17,17) extprm(1)
Buttom  = a(la) sz(p,1) bg("AlertInfoBottom")

[WizardButton]
@       = at(btnlike) a(la) sz(p,a) mg(10,7,3,10) xy(,5) bg(ctl.selected ? "HilightBtn_sel" : (ctl.hotlight ? "HilightBtn" : "")) ext(1)
Icon    = i("Arrow_select") extprm(1) xy(,2,5)
Name    = a(at) xy(1) sz(a,a) f("Header3KGreenLite") extprm(1)
Descr   = a(sa) xy(1,4) sz(a,a) f("Description") extprm(1)

[LWizardButton]
@ = [WizardButton] subst(Name(i("listctrls,5")))

[SupportWindow]
@    = [StyledWindowT] at(dragable,customfooter,a_close) sz(a,a) alias(taskview) i("Main") subst( Footer(subst(Link2(use(1) onclick(dialog("SupportWindow.Traces"))) Link1(use(1) onclick(dialog("EulaInfo"))) )) BodyEx([SupportWindow_Cont] ) ) h(26122)

[SupportWindow_Cont]
@       = sz(522,a) bg("ColorWindow") ext(1)
;Header  = [SupportWindow_Header]
Body    = [SupportWindow_New_Body] xy(,,,16)

[SupportWindow_Header]
@       = sz(p,a)
Hdr     = sz(p,66) a(lt) bg("MainWindowHeader")
Caption = a(lt) sz(p,a) xy(25,8) f("Header3White") 
Desc    = a(la) sz(p,a) xy(25,2,25) f("Header0WhiteLite")
Sep     = $StdFooterSeparator a(lb)

[SupportWindow_New_Body]
@       = sz(p,a) xy(,7) a(la)
SysInfo = [SupportWindow_New_Body_SysInfo_Block] a(lt) xy(0,0)bg("SupportBG") sz(,180)
OnClick = [SupportWindow_New_OneClickSprt] a(la) xy(16,6,16)

[SupportWindow_New_Body_SysInfo_Block]
@           = sz(p,a) mg(20,20)
Avatar	 = a(lt) i("Support") xy(,8)
Body	 = [SupportWindow_New_Body_SysInfo] a(at)  xy(16,5,14)
; xy(16,19,14)

[SupportWindow_New_Body_SysInfo]
@           = sz(p,a)
Desc    = a(lt) sz(p,a) xy(-1,,,14) f("Header5Med")
ProdVer     = [LValue] subst(Name(a(lt) f("Description")) Val(xy(180) f("Description") text($ProductVersion + if(global.ProductHotfix, " (" + global.ProductHotfix + ")"))))
Signatures  = [LValue] xy(,5) subst(Name(a(lt) f("Description")) Val(xy(180) f("Description") text(datetime(AVService.BasesDate))))
OSVer       = [LValue] xy(,5) subst(Name(a(lt) f("Description")) Val(xy(180) f("Description") text(global.OSVersion + $LtrMark)))
NoKeys      = [LValue] xy(,5) subst(Name(a(lt) f("Description")) Val(xy(180) f("Description") ) ) visible( (global.KeyState & #eNoKeys) || !LicInfo.KeyInfo.KeyType )
ActiveLic   = [LValue] xy(,5) subst(Name(a(lt) f("Description")) Val($LinkKL xy(180) text($LtrMark + f_LicenseDisplayKey(LicInfo)+if($HasReserveKey,"\n"+f_LicenseDisplayKey(ResLicInfo)) + $LtrMark) onclick(window("QMLAdditionalLicenseInfo", p_singleton(true))) ) ) visible( !ctl.NoKeys.visible && !$IsSubscription )
SubscrLic   = [LValue] xy(,5) subst(Name(a(lt) f("Description")) Val(xy(180) f("Description") text(f_LicenseDisplayKey(LicInfo) ) ) ) visible( $IsSubscription )

[SupportWindow_New_OneClickSprt]
@           = sz(p,a) 
Arrow       = [WizardButton] onclick(url($OneClickSupportLink)) a(lt) subst(Name() Descr() )
KnowlegeBase= [WizardButton] a(la) onclick(url($KnowledgeBaseLink)) subst(Name() Descr() )
Forum       = [WizardButton] a(la) onclick(url($ForumDefURL)) subst(Name(text($ForumDefName)) Descr() )

[SupportWindow.Traces]
@       = [StyledWindowT] at(dragable,a_close) sz(550,a) subst( BodyEx( [SupportWindow.Traces_Body] ) ) h(15742)

[SupportWindow.Traces_Body]
@       = sz(p,a)
Intro   = sz(p,a) ia(lt) i("warning") xy(7,7)
Trace   = [SupportWindow.Traces_Trace]
Action  = [SupportWindow.Traces_Action]

[SupportWindow.Traces_Trace]
@           = $SettingsGroup xy(,7,8)
Label       = sz(p,a)
StateLabel  = a(la) xy(,7) sz(a,a)
State       = a(ls) xy(60,) sz(a,a)
LevelLabel  = a(la) xy(,10) sz(a,a)
Level       = [SupportWindow.Traces_Trace_Level]
OnOff       = $Button_Medium a(rs) onclick(switch_tracer())

[SupportWindow.Traces_Trace_Level]
@       = t(combo) a(ls) xy(60,-3) sz(150,0) v(tracer_level())
lvl100  = v(100) sz(a,a)
lvl200  = v(200) sz(a,a)
lvl300  = v(300) sz(a,a)
lvl400  = v(400) sz(a,a)
lvl500  = v(500) at(default) sz(a,a)
lvl600  = v(600) sz(a,a)

[SupportWindow.Traces_Action]
@           = $SettingsGroup mg(8,8,8,7)
AvzReport   = [WizardButton] sz(a,a) xy(,) subst(Name(text()) Descr()) onclick(f_AvzDialog("AvzCollectSysInfoWizard"))
Send        = [WizardButton] xy(,) subst(Name(text()) Descr()) onclick(dialog("SendTroublesDialogEx"))
AvzScript   = [WizardButton] xy(,) subst(Name(text()) Descr()) onclick(f_AvzDialog("AvzRunScriptWizard"))
GotoFolder  = $Button_Medium a(rt) xy(,10) enable(bmask(fileattr(objdir(env("AVZSysInfo"))), 0x10)) onclick(if(!gotofile(objdir(env("AVZSysInfo"))), msg("CantOpenFolder"))) use(!$IsRD)

[Product_Notification]
$round = 16
@       = t(dialog) sz(350,a) round($round,$round,$round,$round) at(nocaption,dragable,layered,ontop,bottom,noautofocus) onchange(if(CheckSound, sound(s_ProductNotificationSound($NotifyEventSeverity)))) prm($ProductNotificationText, $ProductNotificationTipText) ontimer(500, if(#eNotifyEulaNotAccepted == f_NOTIFICATION_ID(NotificationId) && EulaVerified, close()))
Body      = [Product_Notification_Body]

[Product_Notification_Body]
@           = sz(s,s) bg("White")
HdrTop      = [Product_Notification_Body_HdrTop]
DescrBody   = [Product_Notification_Body_DescrBody]
BottomBorder = a(la) bg("NotificationWndFooter" + s_NotifyWindowColor($NotifyEventSeverity)) mg(0,0,0,-1)

[Product_Notification_Body_HdrTop]
$btnIndexes = 0,2,0,0,0,1
@       = sz(p,55) bg("NotificationWndHeader" + s_NotifyWindowColor($NotifyEventSeverity) + f_ProductPostfix() + f_BetaPostfix())
Close   = at(btnlike) a(rt) sz(a,a) xy(10,10) bg("BalloonBtnClose,$btnIndexes")
Options = at(btnlike) a(ps) sz(a,a) xy(3) bg("BalloonBtnCfg,$btnIndexes") visible(global.settings.EnableInteraction) onclick(menu("Product_Notification_OptionsMenu"))  use(!$IsKAT)

[Product_Notification_Body_DescrBody]
$mg_x = 28
$mg_y = 13
@          = sz(p,a) a(la) mg($mg_x,$mg_y,$mg_x,$mg_y)
BackGround = sz(p,p) xy(-$mg_x,-$mg_y,-$mg_x,-$mg_y) bg("NotificationWndFiller" + s_NotifyWindowColor($NotifyEventSeverity))
Descr      = t(richedit) sz(p,a) at(readonly,noborder,nofocus) text(DisplayText) tt(f_RemoveTags(DisplayTipText)) a(lt)
Link       = $LinkKL onclick($ProductNotificationLink) a(la) xy(,10) text($ProductNotificationLinkText) visible(ctl.text && (EventID != #eNotifyIpm))
DescrBottom = xy(-20, 10,-20,-$mg_y) [AlertDialogT_Bottom] visible($ShowNoLicReminder && (EventID != #eNotifyLicensing))

[Product_Notification_OptionsMenu]
@                   = t(menu)
;bg("MenuIconBg")
NotifyDisable
NotifyDisableAll
sep
NotifyConfigure     = onclick(window("QMLSettings:Notifications")) text($Configure)

[LabelShadow]
@   = sz(a,a) ext(1)
B   = sz(a,a) xy(1,1) at(singleline) extprm(1)
F   = sz(a,a) a(ss) xy(-1,-1) text(ctl.B.text) at(singleline) extprm(1)

[LabelShadow2]
@   = sz(a,a) at(noowncontent) ext(1)
B   = sz(a,a) xy(1,1) bp(ctl.text = ctl.parent.text; ctl.font = depend(ctl.parent.font); ctl.hotlight = ctl.parent.hotlight; ctl.focused = ctl.parent.focused) extprm(1)
F   = sz(a,a) f(depend(ctl.parent.font) + "F") bp(ctl.text = depend(ctl.parent.text); ctl.hotlight = ctl.parent.hotlight; ctl.focused = ctl.parent.focused) extprm(1)

[LabelShadow1]
;@ = [LabelShadow2] subst(B(xy(0,0)) F(xy(1,1)) ) ext(1)
@   = sz(a,a) at(noowncontent) ext(1)
B   = sz(a,a) bp(ctl.text = ctl.parent.text; ctl.font = ctl.parent.font; ctl.hotlight = ctl.parent.hotlight; ctl.focused = ctl.parent.focused) extprm(1)
F   = sz(a,a) xy(1,1) f(ctl.parent.font + "F") bp(ctl.text = ctl.parent.text; ctl.hotlight = ctl.parent.hotlight; ctl.focused = ctl.parent.focused) extprm(1)

[LabelShadow1_SL]
@   = sz(p,a) at(noowncontent) ext(1)
B   = sz(p,a) at(singleline) bp(ctl.text = ctl.parent.text; ctl.font = ctl.parent.font; ctl.hotlight = ctl.parent.hotlight; ctl.focused = ctl.parent.focused) extprm(1)
F   = sz(p,a) at(singleline) xy(1,1) f(ctl.parent.font + "F") bp(ctl.text = ctl.parent.text; ctl.hotlight = ctl.parent.hotlight; ctl.focused = ctl.parent.focused) extprm(1)

;------------- ProductInfo --------------

[ProductInfo]
$roundR = 9
@  = t(dialog) at(dragable,a_close,nohelp,customfooter,noborder,nocaption) round($roundR,$roundR,$roundR,$roundR) sz(397,408) alias(taskview) bg("AboutWindow")
Title   = [ProductInfo_Title]        xy(,48) a(lt)
Version = f("Normal_Bold_White")     a(c) xy(,120) at(ignorertl) text($ProductVersion + (global.ProductHotfix ? (" (" + global.ProductHotfix + ")") : ""))
About   = [ProductInfo_Body_About]   xy(90,170)   visible($IsRD || !ctl.Title.selected)
Credits = [ProductInfo_Body_Credits] xy(30,150)  visible(ctl.Title.selected) use(!$IsRD)
Separator= bg("AboutSeparator") xy(,330)
Close    = [BtnGlass32] xy(165, 363) onclick(close())

[ProductInfo_Title]
@       = sz(p,a) at(chklike,clickable) 
Logo    = bg(s_ProductAboutLogo(env("ProductType"))) a(c) visible(!ctl.parent.selected)
Team    = bg(s_ProductAboutTeam(env("ProductType"))) a(c) visible(ctl.parent.selected)

[ProductInfo_Body_About]
@           = sz(228,170) 
ThreatDate  = [Value] xy(,10,,3) a(la) subst(Name() Val(text(datetime(AVService.BasesDate)))) use($IsKAT)
Copyright   = a(la) xy(,7) sz(a,a) f("Normal_Bold")
Warning     = a(la) xy(0,15) sz(p,a)
Warning2    = a(sa) xy(,7) sz(a,a)

[ProductInfo_Body_Credits]
@       = sz(348,185)
Credits = t(credits) sz(p,p) xy(,,,7) 

[DialogInfoHeader]
@       = a(la) sz(p,a) bg("AlertInfo") ext(1)
Info    = a(la) sz(p,a) mg(17,17) extprm(1)
Buttom  = a(la) sz(p,4) bg("AlertInfoBottom")
Text    = sz(a,a) xy(17,4) extprm(1) a(lc) f("DialogInfoHeader")

[ProductHeader]
@       = sz(p,73) bg("MainWindowHeader") rs(,0) ext(1)
Logo    = bg(s_ProductLogo(env("ProductType"))) xy($shiftgw_left,40) sz(a,a) a(lt) extprm(1)
_rs     = sz(p,p) at(fixstyle) bg("MainWindowHeader_rs") xy(700) extprm(1)
Sep     = $StdFooterSeparator a(lb) extprm(1)

;------------- ProductInfo --------------

; This section is used in ChartSinkImp.cpp
[__Chart__]
@                               = alias(taskview)
Hips_InBytes                    = v(Firewall.InBytes)
Hips_OutBytes                   = v(Firewall.OutBytes)

[BtnGlassRed49]
$btnIndexes = 0,1,0,0,0,2
@    = t(bmpbutton) at(noowncontent,btnlike) ext(1) sz(a,a)
L    = bg("BtnGlass49RedLeft,$btnIndexes")   a(lt) sz(a,a)
R    = bg("BtnGlass49RedRight,$btnIndexes")  a(rt) sz(a,a)
M    = bg("BtnGlass49RedMiddle,$btnIndexes") sz(p) xy(12,,12)
Text = a(lt) sz(a,p) f("EulaBigButton") extprm(1) at(underlineoff) mg(17,,17) xy(,-5)

[BlueBuyButton]
$btnIndexes = 0,1,0,0,0,2
@    = t(bmpbutton) at(noowncontent,btnlike) ext(1) sz(a,a)
L    = bg("btn_buy_left,$btnIndexes")   sz(a) a(lt)
R    = bg("btn_buy_right,$btnIndexes")  sz(a) a(rt)
M    = bg("btn_buy_center,$btnIndexes") sz(p) xy(9,,9)
Text = a(lt) sz(a,p) f("EulaBigButton") extprm(1) at(underlineoff) mg(17,,17) xy(,-5)

[EulaRequestDialog]
@ = [StyledWindowT_Small] at(noesc) sz(591,500) text($ProductNameLong) subst(Body(mg(0) xy($Border_Shift,$DialogPanelSizeY_top,$Border_Shift, $DialogPanelSizeY_bottom)) BodyEx([EulaRequestDialog_Body]) Footer([EulaDlgFooter]))

[EulaRequestDialog_Body]
$RefreshDialog = ctl.Prompt.visible = false; ctl.Declined.visible = true; ctl.parent.EulaRequestFooter.visible = false; ctl.parent.DeclinedEulaFooter.visible = true
$CloseEulaWindow = if(l_eulaAccepted,f_acceptEula(l_ksn), EulaShowed = true)
$ShowDeclinePage = (l_page = $DeclinePage; $RefreshDialog; false)
@ = alias(oemwelcomepage) \
oninit(l_remindLater = false; g_eulaAccepted = false; l_page = $DecisionPage; l_eulaAccepted = false; l_ksn = true) \
onclose(if(!l_remindLater && l_page == $DecisionPage, $ShowDeclinePage, $CloseEulaWindow))
Prompt   = sz(p,p) a(lt) [EulaRequestPage]	visible(l_page == $DecisionPage)
Eula     = sz(p,p) a(lt) [EulaInfoPage]		visible(l_page == $EulaPage)
Ksn      = sz(p,p) a(lt) [KsnInfoPage]		visible(l_page == $KsnPage)
Declined = sz(p,p) a(lt) [DeclinedEulaPage]	visible(l_page == $DeclinePage)
ThankYou = sz(p,p) a(lt) [ThankYouPage]		visible(l_page == $ThankYouPage)

[EulaRequestPage]
@ = sz(p,p)
Banner		= a(lt) [EulaRequestPageBanner] subst(Caption())
BigIcon		= a(la) i("BigRedMark") xy(30, 30)
Description = a(as) [EulaRequestPageDescription]

[EulaRequestPageDescription]
$UpdateTrayTooltip = g_eulaAccepted = true; ctl.top.parent.Tray.updatedata()
$OemCommercialAccept = (close(#m_res_ok); if(Ins_ActivationCode == "", activate()))
$OnAccept = $UpdateTrayTooltip; l_eulaAccepted = true; l_remindLater = true; if(env("OemCommercial") == "1", $OemCommercialAccept, l_page = $ThankYouPage)
@ = sz(p,a) mg(30,,20)
Caption		= a(lt) f("EulaDlgTextBigRed") 
Description1	= a(sa) $RichText f("EulaDlgDescriptionText1") xy(,15)
Description2	= a(sa) $RichText f("EulaDlgDescriptionText2") xy(,20)
AgreeButton		= a(sa) [BtnGlassRed49] subst(Text(text($AcceptEulaButtonText))) onclick($OnAccept) xy(, 25)

[EulaDlgFooter]
@ = sz(p, $DialogPanelSizeY_bottom) mg($BodyBorder_Shift,7,$BodyBorder_Shift,0)
EulaRequestFooter	= [EulaDlgFooterFooter_EulaRequest]		visible(l_page == $DecisionPage)
DeclinedEulaFooter	= [EulaDlgFooterFooter_DeclinedEula]	visible(l_page == $DeclinePage)
MoreInfoFooter		= [EulaDlgFooterFooter_MoreInfo]		visible(l_page == $KsnPage || l_page == $EulaPage)
ThankYouFooter		= [EulaDlgFooterFooter_ThankYou]		visible(l_page == $ThankYouPage)

[EulaDlgFooterFooter_EulaRequest]
@    = sz(p, p) 
KsnCheck		= a(lc) $Check v(l_ksn) sz(16, a) xy(,3)
KsnCheckText	= a(as) $RichText f("EulaDlgFooterText") onclick(l_page = $KsnPage) sz(400,a) xy(3)
DeclineButton	= a(rc) [BtnGlass32] sz(a, $Button_Large_CY) onclick(l_remindLater = true; close(#m_res_ok))

[EulaRequestPageBanner]
@ = sz(a,a) ext(1)
Banner = bg("EulaBanner")
Caption   = a(lc) xy(20) f("EulaDlgHeaderMain") extprm(1)

[DeclinedEulaPage]
@          = sz(p,p)
Banner		= a(lt) [EulaRequestPageBanner] subst(Caption())
BigIcon		= a(la) i("BigYellowMark") xy(30, 30)
Description = a(as) [DeclinedEulaPageDescription]

[DeclinedEulaPageDescription]
@ = sz(p,a) mg(30,,40)
Description	= a(sa) $RichText f("EulaDlgDescriptionText1")
BackButton	= a(sa) [BtnGlassRed49] subst(Text(text())) onclick(l_page = $DecisionPage) xy(, 30)

[EulaDlgFooterFooter_DeclinedEula]
@ = sz(p, p) 
RemovalHint	= a(lt) f("EulaDlgFooterText") sz(400,a) xy(,3)
Postpone	= a(rc) [BtnGlass32] sz(a, $Button_Large_CY) onclick(l_remindLater = true; close(#m_res_ok))

[KsnInfoPage]
@ = mg(0,0)
Ksn			= sz(p,50) f("EulaDlgHeader") mg(20,10)
Text		= a(la) t(richedit) at(readonly,vscroll) text($KsnFile) sz(p,p) xy(-1,-1,-1,-1)

[EulaDlgFooterFooter_MoreInfo]
@ = sz(p, p) 
Back = a(rc) [BtnGlass32] sz(120, $Button_Large_CY) onclick(l_page = $DecisionPage)

[EulaInfoPage]
@ = mg(0,0)
Eula		= sz(p,50) f("EulaDlgHeader") mg(20,10)
Text		= a(la) t(richedit) at(readonly,vscroll) text($EulaFile) sz(p,p) xy(-1,-1,-1,-1)

[ThankYouPage]
@          = sz(p,p)
Banner		= a(lt) [EulaRequestPageBanner] subst(Caption())
BigIcon		= a(la) i("BigGreenMark") xy(30, 30)
Description = a(as) [ThankYouPageDescription]

[ThankYouPageDescription]
@ = sz(p,a) mg(30,,20)
Caption			= a(lt) f("EulaDlgTextBigGreen") 
Description1	= a(sa) $RichText f("EulaDlgDescriptionText1") xy(,15)
Description2	= a(sa) $RichText f("EulaDlgDescriptionText3") xy(,20)
LearnMoreButton	= a(sa) [BlueBuyButton] subst(Text()) onclick(buy()) xy(, 25)

[EulaDlgFooterFooter_ThankYou]
@ = sz(p, p) 
Close = a(rc) [BtnGlass32] sz(120, $Button_Large_CY) onclick(close(#m_res_ok))

[QMLMainWindow]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(30,30,30,30) source(main_window/MainWindow.qml) viewmodelid(MainWindow) onclose(allowInstallGadget(), true)

[QMLTaskManager]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(30,30,30,30) source(task_manager/TaskManager.qml) viewmodelid(TaskList)

[QMLCheckHosts]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(30,30,30,30) source(startup/CheckHosts.qml) viewmodelid(CheckHosts)

[QMLAdditionalLicenseInfo]
@ = t(qmldialog) at(nocaption,noborder) round(15,15,15,15) source(license/AdditionalLicenseInfo.qml) viewmodelid(AdditionalLicenseInformation)

[QMLRebootPage]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(15,15,15,15) source(startup/RebootPage.qml) viewmodelid(RebootPage)

[QMLFileAdvisor]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(15,15,15,15) source(ksn/FileAdvisor.qml) viewmodelid(FileAdvisor)

[QMLMessageBox]
@ = t(qmldialog) at(nocaption,noborder,qmlmsgbox) round(15,15,15,15) contextname(MessageBoxContext) source(common/widgets/MessageBox.qml) viewmodelid(MessageBox)

[QMLParCtlAlert]
@ = t(qmldialog) at(nocaption,noborder,a_ok,a_cancel) round(15,15,15,15) source(ParentalControl/ResolveLicenseProblem.qml) viewmodelid(ParentalControlAlert)

[QMLMessageBoxTemplate]
@ = t(qmldialog) at(nocaption,noborder) round(15,15,15,15)

[QMLMessageBoxTemplateOnTop]
@ = t(qmldialog) at(nocaption,noborder,alwaysontop) round(15,15,15,15)

[QMLSettings]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(30,30,30,30) source(settings/Settings.qml) viewmodelid(Settings)

[QMLSupport]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(30,30,30,30) source(support/Support.qml) viewmodelid(SupportWindow)

[QMLProductNotification]
@ = t(qmldialog) at(nocaption,minimizable,noborder,bottom,ontop,dragable,layered) round(30,30,30,30) source(notifications/Balloon.qml) viewmodelid(ProductNotification)

[QMLIPMWelcomePage]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(15,15,15,15) source(startup/ipm_welcome_page.qml) viewmodelid(IPMWelcomePage)

[QMLIPMEndOfLicense]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(15,15,15,15) source(license/ipm_end_of_license.qml) viewmodelid(IPMEndOfLicense)

[QMLAbout]
@ = t(qmldialog) at(nocaption,minimizable,noborder,a_close,nohelp,customfooter,dragable) round(15,15,15,15) source(about/About.qml) viewmodelid(AboutWindow)

[QMLSafeBankingRulesDialog]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(15,15,15,15) source(safe_banking/SafeBankingRulesDialog.qml) viewmodelid(SafeBankingRulesDialog)

[QMLSecureKeyboardUrlSettingsDialog]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(15,15,15,15) source(protected_input/SecureKeyboardUrlSettingsDialog.qml) viewmodelid(UrlMasksViewModel)

[QMLVirtualKeyboardUrlSettingsDialog]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(15,15,15,15) source(protected_input/VirtualKeyboardUrlSettingsDialog.qml) viewmodelid(UrlMasksViewModel)

[QMLVirtualKeyboardUrlInclusiveDialog]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(15,15,15,15) source(protected_input/VirtualKeyboardUrlInclusiveDialog.qml) viewmodelid(UrlMasksDialogViewModel)

[QMLVirtualKeyboardUrlExclusiveDialog]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(15,15,15,15) source(protected_input/VirtualKeyboardUrlExclusiveDialog.qml) viewmodelid(UrlMasksDialogViewModel)

[QMLSecureKeyboardUrlInclusiveDialog]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(15,15,15,15) source(protected_input/SecureKeyboardUrlInclusiveDialog.qml) viewmodelid(UrlMasksDialogViewModel)

[QMLSecureKeyboardUrlExclusiveDialog]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(15,15,15,15) source(protected_input/SecureKeyboardUrlExclusiveDialog.qml) viewmodelid(UrlMasksDialogViewModel)

[QMLSendDumpsDialog]
@ = t(qmldialog) at(nocaption,minimizable,noborder) round(15,15,15,15) source(support/SupportSendDumpsDialog.qml) viewmodelid(SupportSendReportWindow)

[QMLProtectedInputRebootMessageBox]
@ = t(qmldialog) at(nocaption,noborder) round(15,15,15,15) source(protected_input/ProtectedInputRebootMessageBox.qml) viewmodelid(RebootMessageBoxViewModel)

